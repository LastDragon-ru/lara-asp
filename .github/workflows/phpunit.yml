name: PHP Unit

on:
  workflow_call:
    inputs:
      package:
        description: "Package name to test."
        required: false
        default: ""
        type: string
      packages-names:
        description: "The JSON with all packages (required to configure composer repositories to resolve dependencies)."
        required: false
        default: ""
        type: string
      packages-directory:
        description: "The path of packages directory (required if `package` set)."
        required: false
        default: ""
        type: string
      runs-on:
        description: "The JSON with required OSs."
        required: false
        type: string
        default: '["ubuntu-latest"]'

permissions:
  contents: read

env:
  WORKING_DIRECTORY: ${{ inputs.package && format('{0}/{1}', inputs.packages-directory, inputs.package) || ''}}

jobs:
  settings:
    name: Settings
    runs-on: ubuntu-latest
    outputs:
      php-versions: ${{ steps.settings.outputs.php-versions }}
      dependencies: ${{ steps.settings.outputs.dependencies }}
      laravel-versions: ${{ steps.settings.outputs.laravel-versions }}
      optional-packages: ${{ steps.settings.outputs.optional-packages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install PHP
        uses: ./.github/actions/php
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
          dependencies: false
          tools: false

      - name: Collect Settings
        id: settings
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # PHP
          echo "php-versions=$(jq '.require."php" | split("|") | map(sub("^[^\\d]+"; "")) | sort' -c composer.json)" >> $GITHUB_OUTPUT

          # Dependencies
          DEPS_HIGHEST="highest"
          DEPS_LOCKED="$(if [ ! "${{ github.event_name }}" == "schedule" ] && [ -f "composer.lock" ]; then echo "locked"; fi)"
          DEPS_LOWEST="$(if [ ! "${{ github.event_name }}" == "schedule" ]; then echo "lowest"; fi)"

          echo "dependencies=$(echo "[\"$DEPS_HIGHEST\", \"$DEPS_LOCKED\", \"$DEPS_LOWEST\"]" | jq "[.[] | select(length > 0)]" -r -c)" >> $GITHUB_OUTPUT

          # Laravel
          echo "laravel-versions=$(jq '.require."laravel/framework" // "null" | split("|") | sort' -c composer.json)" >> $GITHUB_OUTPUT

          # Optional packages
          echo "optional-packages=$(jq '([((."extra"."lara-asp"."ci"."optional-packages" // ["null"]) | flatten | unique | sort | join(","))] + ["null"]) | unique' -r -c composer.json)" >> $GITHUB_OUTPUT

  run:
    # Only 28 characters are visible on UI :(
    name: >-
      P${{ matrix.php }}
      ${{ matrix.laravel != 'null' && format('L{0}', matrix.laravel) || '' }}
      ${{ matrix.dependencies == 'locked' && 'ðŸ”’' || (matrix.dependencies == 'highest' && 'ðŸ¡¹' || 'ðŸ¡»') }}
      ${{ startsWith(matrix.os, 'windows') && 'ðŸ††' || (startsWith(matrix.os, 'macos') && 'ðŸ…¼' || 'ðŸ†„') }}
      ${{ matrix.optional != 'null' && 'ðŸª“' || '' }}

    runs-on: ${{ matrix.os }}
    needs:
      - settings

    strategy:
      fail-fast: false
      matrix:
        php: ${{ fromJson(needs.settings.outputs.php-versions) }}
        laravel: ${{ fromJson(needs.settings.outputs.laravel-versions) }}
        optional: ${{ fromJson(needs.settings.outputs.optional-packages) }}
        dependencies: ${{ fromJson(needs.settings.outputs.dependencies) }}
        os: ${{ fromJson(inputs.runs-on) }}
        exclude:
          # Laravel v10 doesn't support PHP 8.0
          - php: 8.0
            laravel: ^10.0.0

    steps:
      # Required to avoid converting LF into CRLF on Windows or some tests will fail.
      - name: Disable core.autocrlf
        run: |
          git config --global core.autocrlf false

      # Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Install PHP
      - name: Install PHP
        uses: ./.github/actions/php
        with:
          version: ${{ matrix.php }}
          dependencies: false
          tools: false
          working-directory: ${{ env.WORKING_DIRECTORY }}

      # Required to resolve packages correctly.
      - name: Composer repositories
        if: ${{ inputs.packages-names }}
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          PACKAGES=$(echo '${{ inputs.packages-names }}' | jq 'map(select(. != "${{ inputs.package }}"))' | jq -c -r '.[]')

          while read -r PKG
          do
            composer config "repositories.${PKG}" path "../${PKG}"
          done <<< "${PACKAGES}"

      # On Windows, the caret ^ is the escape character, so the version string
      # that contains ^ will be handled incorrectly
      - name: Install Laravel
        if: ${{ matrix.laravel != 'null' }}
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          composer remove --no-interaction --no-progress --ansi --no-update laravel/framework
          composer require --no-interaction --no-progress --ansi --no-update "laravel/framework:${{ matrix.laravel }}"
          composer remove --no-interaction --no-progress --ansi --no-update --dev larastan/larastan

      - name: Remove optional packages
        if: ${{ matrix.optional != 'null' }}
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          PACKAGES=$(echo '"${{ matrix.optional }}"' | jq 'split(",")' | jq -c -r '.[]')

          while read -r PKG
          do
            composer remove --no-interaction --no-progress --ansi --no-update "${PKG}"
            composer remove --no-interaction --no-progress --ansi --no-update --dev "${PKG}"
          done <<< "${PACKAGES}"

      - name: Install dependencies
        uses: ramsey/composer-install@v2
        with:
          working-directory: ${{ env.WORKING_DIRECTORY }}
          dependency-versions: ${{ matrix.dependencies }}

      - name: Execute
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          ./vendor/bin/phpunit
