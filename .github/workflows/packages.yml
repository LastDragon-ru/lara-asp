name: Sync Packages

on:
  push:
    branches:
      - 'master'
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  settings:
    uses: LastDragon-ru/lara-asp/.github/workflows/settings.yml@master

  sync:
    name: "Sync package: ${{ matrix.package }}"
    runs-on: ubuntu-latest
    needs:
      - settings
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.settings.outputs.packages-names) }}
    steps:
      # Dependencies
      - name: Install git-filter-repo
        run: sudo -H pip3 install git-filter-repo
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets[matrix.package] }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Checkout source repo
      # Unfortunately I'm not sure how to use actions/checkout with `--no-single-branch`
      # that is required to get all commits.
      - name: Checkout src
        run: |
          git clone --no-single-branch "git@github.com:${{ github.repository }}.git" src

      # Create package repo
      - name: Create package repo
        run: |
          git init package
      - name: Configure package repo
        working-directory: package
        run: |
          git remote add origin "git@github.com:${{ github.repository }}-${{ matrix.package }}.git"

      # Update package
      # There is one known issue: if branch related only for one package it will
      # be cloned into all other packages (and will be without commits).
      #
      # How to disable this behaviour?
      - name: Extract commits
        run: |
          git-filter-repo --source=src --target=package --subdirectory-filter="${{ needs.settings.outputs.packages-directory }}/${{ matrix.package }}"

      # Before `push --mirror` we need enable track for all branches, or they will
      # not  be visible after `git clone` and on the Branches page on Github.
      #
      # https://stackoverflow.com/a/379842/7511282
      - name: Setup branches
        working-directory: package
        run: |
          for i in `git branch -a | grep remote | grep -v HEAD | grep -v master`; do git branch --track ${i#remotes/origin/} $i; done

      - name: Push package
        working-directory: package
        run: |
          git push --mirror origin
