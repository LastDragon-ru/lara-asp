name: Continuous Integration

on:
  push:
    branches:
      - 'main'
      - '[0-9]+.x'
  pull_request:
  schedule:
    - cron: "0 0 * * SAT"
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  settings:
    name: Settings
    uses: ./.github/workflows/settings.yml

  dependencies:
    name: Dependencies checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install PHP
        uses: ./.github/actions/php
      - name: Check package versions
        run: |
          composer run-script monorepo-builder
      - name: Check dependencies
        run: |
          composer run-script composer-dependency-analyser
      - name: Check packages
        run: |
          composer run-script composer-require-checker
      - name: Check unused packages
        run: |
          composer run-script composer-unused

  dependencies-package:
    name: Dependencies checks
    needs:
      - settings
      - dependencies
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.settings.outputs.packages-names) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install PHP
        uses: ./.github/actions/php
      - name: Composer repositories
        shell: bash
        working-directory: ${{ needs.settings.outputs.packages-directory }}/${{ matrix.package }}
        run: |
          PACKAGES=$(echo '${{ needs.settings.outputs.packages-names }}' | jq 'map(select(. != "${{ matrix.package }}"))' | jq -c -r '.[]')

          while read -r PKG
          do
            composer config "repositories.${PKG}" path "../${PKG}"
          done <<< "${PACKAGES}"
      - name: Install package dependencies
        uses: ramsey/composer-install@v2
        with:
          working-directory: ${{ needs.settings.outputs.packages-directory }}/${{ matrix.package }}
      - name: Check dependencies
        run: |
          composer run-script composer-dependency-analyser -- --composer-json="${{ needs.settings.outputs.packages-directory }}/${{ matrix.package }}/composer.json"
      - name: Check packages
        run: |
          composer run-script composer-require-checker -- "${{ needs.settings.outputs.packages-directory }}/${{ matrix.package }}/composer.json"
      - name: Check unused packages
        run: |
          composer run-script composer-unused -- "${{ needs.settings.outputs.packages-directory }}/${{ matrix.package }}/composer.json"

  phpcs:
    name: PHP CodeSniffer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install PHP
        uses: ./.github/actions/php
      - name: Execute
        run: |
          composer run-script phpcs -- --report=checkstyle | cs2pr

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install PHP
        uses: ./.github/actions/php
      - name: Execute
        run: |
          composer run-script phpstan -- --error-format=checkstyle | cs2pr

  phpunit:
    name: Tests
    uses: ./.github/workflows/phpunit.yml
    with:
      runs-on: '["ubuntu-latest", "windows-latest"]'

  phpunit-package:
    name: Package tests
    needs:
      - settings
      - phpunit
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.settings.outputs.packages-names) }}
    uses: ./.github/workflows/phpunit.yml
    with:
      package: ${{ matrix.package }}
      packages-names: ${{ needs.settings.outputs.packages-names }}
      packages-directory: ${{ needs.settings.outputs.packages-directory }}

  markdownlint:
    name: Markdownlint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: ./.github/actions/npm
      - name: Setup problem matcher
        uses: xt0rted/markdownlint-problem-matcher@v2
      - name: Execute
        run: |
          npm run markdownlint
