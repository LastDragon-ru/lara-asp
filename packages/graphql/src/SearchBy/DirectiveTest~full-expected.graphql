input Nested {
  value: String
}

input Properties {
  idScalar: ID
  idScalarNotNull: ID!
  intScalar: Int
  inScalarNotNull: Int!
  floatScalar: Float
  floatScalarNotNull: Float!
  stringScalar: String
  stringScalarNotNull: String!
  booleanScalar: Boolean
  booleanScalarNotNull: Boolean!
  nested: Nested
  nestedNotNull: Nested!
  enum: Value
  enumNotNull: Value!
}

type Query {
  test(where: [SearchByConditionProperties!]): ID!
}

"""Available conditions for input Nested."""
input SearchByConditionNested {
  """All of the conditions must be true."""
  allOf: [SearchByConditionNested!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionNested!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  value: SearchByScalarStringOrNull
}

"""Available conditions for input Properties."""
input SearchByConditionProperties {
  """All of the conditions must be true."""
  allOf: [SearchByConditionProperties!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionProperties!]

  """Not."""
  not: SearchByFlag

  """Property condition."""
  idScalar: SearchByScalarIDOrNull

  """Property condition."""
  idScalarNotNull: SearchByScalarID

  """Property condition."""
  intScalar: SearchByScalarIntOrNull

  """Property condition."""
  inScalarNotNull: SearchByScalarInt

  """Property condition."""
  floatScalar: SearchByScalarFloatOrNull

  """Property condition."""
  floatScalarNotNull: SearchByScalarFloat

  """Property condition."""
  stringScalar: SearchByScalarStringOrNull

  """Property condition."""
  stringScalarNotNull: SearchByScalarString

  """Property condition."""
  booleanScalar: SearchByScalarBooleanOrNull

  """Property condition."""
  booleanScalarNotNull: SearchByScalarBoolean

  """Property condition."""
  nested: SearchByRelationNested

  """Property condition."""
  nestedNotNull: SearchByRelationNested

  """Property condition."""
  enum: SearchByEnumValueOrNull

  """Property condition."""
  enumNotNull: SearchByEnumValue
}

"""
Available operators for enum Value (only one operator allowed at a time).
"""
input SearchByEnumValue {
  """Equal (`=`)."""
  eq: Value

  """Within a set of values."""
  in: [Value!]

  """Not."""
  not: SearchByFlag
}

"""
Available operators for enum Value (only one operator allowed at a time).
"""
input SearchByEnumValueOrNull {
  """Equal (`=`)."""
  eq: Value

  """Within a set of values."""
  in: [Value!]

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""Flag."""
enum SearchByFlag {
  yes
}

"""Relation condition for input Nested."""
input SearchByRelationNested {
  """Has?"""
  has: [SearchByConditionNested!]!

  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar Boolean! (only one operator allowed at a time).
"""
input SearchByScalarBoolean {
  """Equal (`=`)."""
  eq: Boolean

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar Boolean (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
  """Equal (`=`)."""
  eq: Boolean

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar Float! (only one operator allowed at a time).
"""
input SearchByScalarFloat {
  """Equal (`=`)."""
  eq: Float

  """Less than (`<`)."""
  lt: Float

  """Less than or equal to (`<=`)."""
  lte: Float

  """Greater than (`>`)."""
  gt: Float

  """Greater than or equal to (`>=`)."""
  gte: Float

  """Within a set of values."""
  in: [Float!]

  """Within a range."""
  between: SearchByScalarFloatOperatorBetween

  """Not."""
  not: SearchByFlag
}

input SearchByScalarFloatOperatorBetween {
  min: Float!
  max: Float!
}

"""
Available operators for scalar Float (only one operator allowed at a time).
"""
input SearchByScalarFloatOrNull {
  """Equal (`=`)."""
  eq: Float

  """Less than (`<`)."""
  lt: Float

  """Less than or equal to (`<=`)."""
  lte: Float

  """Greater than (`>`)."""
  gt: Float

  """Greater than or equal to (`>=`)."""
  gte: Float

  """Within a set of values."""
  in: [Float!]

  """Within a range."""
  between: SearchByScalarFloatOperatorBetween

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar ID! (only one operator allowed at a time).
"""
input SearchByScalarID {
  """Equal (`=`)."""
  eq: ID

  """Within a set of values."""
  in: [ID!]

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar ID (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
  """Equal (`=`)."""
  eq: ID

  """Within a set of values."""
  in: [ID!]

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar Int! (only one operator allowed at a time).
"""
input SearchByScalarInt {
  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Within a set of values."""
  in: [Int!]

  """Within a range."""
  between: SearchByScalarIntOperatorBetween

  """Not."""
  not: SearchByFlag
}

input SearchByScalarIntOperatorBetween {
  min: Int!
  max: Int!
}

"""
Available operators for scalar Int (only one operator allowed at a time).
"""
input SearchByScalarIntOrNull {
  """Equal (`=`)."""
  eq: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Within a set of values."""
  in: [Int!]

  """Within a range."""
  between: SearchByScalarIntOperatorBetween

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar String! (only one operator allowed at a time).
"""
input SearchByScalarString {
  """Equal (`=`)."""
  eq: String

  """Like."""
  like: String

  """Within a set of values."""
  in: [String!]

  """Not."""
  not: SearchByFlag
}

"""
Available operators for scalar String (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
  """Equal (`=`)."""
  eq: String

  """Like."""
  like: String

  """Within a set of values."""
  in: [String!]

  """Is NULL?"""
  isNull: SearchByFlag

  """Not."""
  not: SearchByFlag
}

enum Value {
  one
  two
}
