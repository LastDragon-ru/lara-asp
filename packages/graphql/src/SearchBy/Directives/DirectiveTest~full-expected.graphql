enum EnumA {
    one
    two
}

enum SearchByTypeFlag {
    yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedA.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedA {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Complex operator marker.
    """
    relation: SearchByTypeFlag! = yes

    """
    Additional conditions.
    """
    where: SearchByConditionNestedA
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedB.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedB {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Complex operator marker.
    """
    relation: SearchByTypeFlag! = yes

    """
    Additional conditions.
    """
    where: SearchByConditionNestedB
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedC.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedC {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Complex operator marker.
    """
    relation: SearchByTypeFlag! = yes

    """
    Additional conditions.
    """
    where: SearchByConditionNestedC
}

"""
Available conditions for input InputA (only one property allowed at a time).
"""
input SearchByConditionInputA {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionInputA!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionInputA!]

    """
    Property condition.
    """
    booleanScalar: SearchByScalarBooleanOrNull

    """
    Property condition.
    """
    booleanScalarNotNull: SearchByScalarBoolean

    """
    Property condition.
    """
    enum: SearchByEnumEnumAOrNull

    """
    Property condition.
    """
    enumNotNull: SearchByEnumEnumA

    """
    Property condition.
    """
    floatScalar: SearchByScalarFloatOrNull

    """
    Property condition.
    """
    floatScalarNotNull: SearchByScalarFloat

    """
    Property condition.
    """
    idScalar: SearchByScalarIDOrNull

    """
    Property condition.
    """
    idScalarNotNull: SearchByScalarID

    """
    Property condition.
    """
    inScalarNotNull: SearchByScalarInt

    """
    Property condition.
    """
    intScalar: SearchByScalarIntOrNull

    """
    Property condition.
    """
    nested: SearchByComplexRelationNestedA

    """
    Property condition.
    """
    nestedNotNull: SearchByComplexRelationNestedA

    """
    Not.
    """
    not: SearchByConditionInputA

    """
    Property condition.
    """
    stringScalar: SearchByScalarStringOrNull

    """
    Property condition.
    """
    stringScalarNotNull: SearchByScalarString
}

"""
Available conditions for input InputB (only one property allowed at a time).
"""
input SearchByConditionInputB {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionInputB!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionInputB!]

    """
    Property condition.
    """
    id: SearchByScalarIDOrNull

    """
    Not.
    """
    not: SearchByConditionInputB
}

"""
Available conditions for input NestedA (only one property allowed at a time).
"""
input SearchByConditionNestedA {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionNestedA!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionNestedA!]

    """
    Property condition.
    """
    nested: SearchByComplexRelationNestedA

    """
    Not.
    """
    not: SearchByConditionNestedA

    """
    Property condition.
    """
    value: SearchByScalarStringOrNull
}

"""
Available conditions for input NestedB (only one property allowed at a time).
"""
input SearchByConditionNestedB {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionNestedB!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionNestedB!]

    """
    Property condition.
    """
    nested: SearchByComplexRelationNestedC

    """
    Not.
    """
    not: SearchByConditionNestedB
}

"""
Available conditions for input NestedC (only one property allowed at a time).
"""
input SearchByConditionNestedC {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionNestedC!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionNestedC!]

    """
    Property condition.
    """
    nested: SearchByComplexRelationNestedB

    """
    Not.
    """
    not: SearchByConditionNestedC
}

"""
Available operators for enum EnumA (only one operator allowed at a time).
"""
input SearchByEnumEnumA {
    """
    Equal (`=`).
    """
    equal: EnumA

    """
    Within a set of values.
    """
    in: [EnumA!]

    """
    Not Equal (`!=`).
    """
    notEqual: EnumA

    """
    Outside a set of values.
    """
    notIn: [EnumA!]
}

"""
Available operators for enum EnumA (only one operator allowed at a time).
"""
input SearchByEnumEnumAOrNull {
    """
    Equal (`=`).
    """
    equal: EnumA

    """
    Within a set of values.
    """
    in: [EnumA!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: EnumA

    """
    Outside a set of values.
    """
    notIn: [EnumA!]
}

"""
Available operators for scalar Boolean! (only one operator allowed at a time).
"""
input SearchByScalarBoolean {
    """
    Equal (`=`).
    """
    equal: Boolean
}

"""
Available operators for scalar Boolean (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
    """
    Equal (`=`).
    """
    equal: Boolean

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
}

"""
Available operators for scalar Float! (only one operator allowed at a time).
"""
input SearchByScalarFloat {
    """
    Within a range.
    """
    between: SearchByTypeRangeFloat

    """
    Equal (`=`).
    """
    equal: Float

    """
    Greater than (`>`).
    """
    greaterThan: Float

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Float

    """
    Within a set of values.
    """
    in: [Float!]

    """
    Less than (`<`).
    """
    lessThan: Float

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Float

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeFloat

    """
    Not Equal (`!=`).
    """
    notEqual: Float

    """
    Outside a set of values.
    """
    notIn: [Float!]
}

"""
Available operators for scalar Float (only one operator allowed at a time).
"""
input SearchByScalarFloatOrNull {
    """
    Within a range.
    """
    between: SearchByTypeRangeFloat

    """
    Equal (`=`).
    """
    equal: Float

    """
    Greater than (`>`).
    """
    greaterThan: Float

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Float

    """
    Within a set of values.
    """
    in: [Float!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Less than (`<`).
    """
    lessThan: Float

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Float

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeFloat

    """
    Not Equal (`!=`).
    """
    notEqual: Float

    """
    Outside a set of values.
    """
    notIn: [Float!]
}

"""
Available operators for scalar ID! (only one operator allowed at a time).
"""
input SearchByScalarID {
    """
    Equal (`=`).
    """
    equal: ID

    """
    Within a set of values.
    """
    in: [ID!]

    """
    Not Equal (`!=`).
    """
    notEqual: ID

    """
    Outside a set of values.
    """
    notIn: [ID!]
}

"""
Available operators for scalar ID (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
    """
    Equal (`=`).
    """
    equal: ID

    """
    Within a set of values.
    """
    in: [ID!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: ID

    """
    Outside a set of values.
    """
    notIn: [ID!]
}

"""
Available operators for scalar Int! (only one operator allowed at a time).
"""
input SearchByScalarInt {
    """
    Within a range.
    """
    between: SearchByTypeRangeInt

    """
    Equal (`=`).
    """
    equal: Int

    """
    Greater than (`>`).
    """
    greaterThan: Int

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Int

    """
    Within a set of values.
    """
    in: [Int!]

    """
    Less than (`<`).
    """
    lessThan: Int

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Int

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeInt

    """
    Not Equal (`!=`).
    """
    notEqual: Int

    """
    Outside a set of values.
    """
    notIn: [Int!]
}

"""
Available operators for scalar Int (only one operator allowed at a time).
"""
input SearchByScalarIntOrNull {
    """
    Within a range.
    """
    between: SearchByTypeRangeInt

    """
    Equal (`=`).
    """
    equal: Int

    """
    Greater than (`>`).
    """
    greaterThan: Int

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Int

    """
    Within a set of values.
    """
    in: [Int!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Less than (`<`).
    """
    lessThan: Int

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Int

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeInt

    """
    Not Equal (`!=`).
    """
    notEqual: Int

    """
    Outside a set of values.
    """
    notIn: [Int!]
}

"""
Available operators for scalar String! (only one operator allowed at a time).
"""
input SearchByScalarString {
    """
    Contains.
    """
    contains: String

    """
    Ends with a string.
    """
    endsWith: String

    """
    Equal (`=`).
    """
    equal: String

    """
    Within a set of values.
    """
    in: [String!]

    """
    Like.
    """
    like: String

    """
    Not Equal (`!=`).
    """
    notEqual: String

    """
    Outside a set of values.
    """
    notIn: [String!]

    """
    Not like.
    """
    notLike: String

    """
    Starts with a string.
    """
    startsWith: String
}

"""
Available operators for scalar String (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
    """
    Contains.
    """
    contains: String

    """
    Ends with a string.
    """
    endsWith: String

    """
    Equal (`=`).
    """
    equal: String

    """
    Within a set of values.
    """
    in: [String!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Like.
    """
    like: String

    """
    Not Equal (`!=`).
    """
    notEqual: String

    """
    Outside a set of values.
    """
    notIn: [String!]

    """
    Not like.
    """
    notLike: String

    """
    Starts with a string.
    """
    startsWith: String
}

input SearchByTypeRangeFloat {
    max: Float!
    min: Float!
}

input SearchByTypeRangeInt {
    max: Int!
    min: Int!
}

type Query {
    a(
        where: SearchByConditionInputA
        @searchBy(
            operators: [
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AllOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AnyOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\Not"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Complex\\Relation"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Equal"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\In"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotIn"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\IsNull"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\IsNotNull"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\LessThan"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\LessThanOrEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\GreaterThan"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\GreaterThanOrEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Between"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotBetween"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Like"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotLike"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Contains"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\StartsWith"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\EndsWith"
            ]
        )
    ): ID!
    @all

    b(
        where: SearchByConditionNestedA
        @searchBy(
            operators: [
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AllOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AnyOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\Not"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Complex\\Relation"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Equal"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Like"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotLike"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\In"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotIn"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Contains"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\StartsWith"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\EndsWith"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\IsNull"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\IsNotNull"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\LessThan"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\LessThanOrEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\GreaterThan"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\GreaterThanOrEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Between"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotBetween"
            ]
        )
    ): ID!
    @all

    c(
        where: SearchByConditionInputB
        @searchBy(
            operators: [
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AllOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AnyOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\Not"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Equal"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\In"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotIn"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\IsNull"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\IsNotNull"
            ]
        )
    ): ID!
    @all

    d(
        where: SearchByConditionNestedB
        @searchBy(
            operators: [
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AllOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AnyOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\Not"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Complex\\Relation"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Equal"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\LessThan"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\LessThanOrEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\GreaterThan"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\GreaterThanOrEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\In"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotIn"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Between"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotBetween"
            ]
        )
    ): ID!
    @all
}

"""
Fetch all Eloquent models and return the collection as the result.
"""
directive @all(
    """
    Point to a function that provides a Query Builder instance.
    This replaces the use of a model.
    """
    builder: String

    """
    Specify the class name of the model to use.
    This is only needed when the default model detection does not work.
    """
    model: String

    """
    Apply scopes to the underlying query.
    """
    scopes: [String!]
)
on
    | FIELD_DEFINITION

"""
Convert Input into Search Conditions.
"""
directive @searchBy on
    | ARGUMENT_DEFINITION
