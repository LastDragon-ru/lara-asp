enum EnumA {
    one
    two
}

enum SearchByTypeFlag {
    yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedA.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedA {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionNestedA
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedB.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedB {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionNestedB
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedC.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedC {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionNestedC
}

"""
Available conditions for input InputA (only one property allowed at a time).
"""
input SearchByConditionInputA {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionInputA!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionInputA!]
    @searchByOperatorAnyOf

    """
    Property condition.
    """
    booleanScalar: SearchByScalarBooleanOrNull

    """
    Property condition.
    """
    booleanScalarNotNull: SearchByScalarBoolean

    """
    Property condition.
    """
    enum: SearchByEnumEnumAOrNull

    """
    Property condition.
    """
    enumNotNull: SearchByEnumEnumA

    """
    Property condition.
    """
    floatScalar: SearchByScalarFloatOrNull

    """
    Property condition.
    """
    floatScalarNotNull: SearchByScalarFloat

    """
    Property condition.
    """
    idScalar: SearchByScalarIDOrNull

    """
    Property condition.
    """
    idScalarNotNull: SearchByScalarID

    """
    Property condition.
    """
    inScalarNotNull: SearchByScalarInt

    """
    Property condition.
    """
    intScalar: SearchByScalarIntOrNull

    """
    Relationship condition.
    """
    nested: SearchByComplexRelationNestedA
    @searchByOperatorRelation

    """
    Relationship condition.
    """
    nestedNotNull: SearchByComplexRelationNestedA
    @searchByOperatorRelation

    """
    Not.
    """
    not: SearchByConditionInputA
    @searchByOperatorNot

    """
    Property condition.
    """
    stringScalar: SearchByScalarStringOrNull

    """
    Property condition.
    """
    stringScalarNotNull: SearchByScalarString
}

"""
Available conditions for input InputB (only one property allowed at a time).
"""
input SearchByConditionInputB {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionInputB!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionInputB!]
    @searchByOperatorAnyOf

    """
    Property condition.
    """
    id: SearchByScalarIDOrNull

    """
    Not.
    """
    not: SearchByConditionInputB
    @searchByOperatorNot
}

"""
Available conditions for input NestedA (only one property allowed at a time).
"""
input SearchByConditionNestedA {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionNestedA!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionNestedA!]
    @searchByOperatorAnyOf

    """
    Relationship condition.
    """
    nested: SearchByComplexRelationNestedA
    @searchByOperatorRelation

    """
    Not.
    """
    not: SearchByConditionNestedA
    @searchByOperatorNot

    """
    Property condition.
    """
    value: SearchByScalarStringOrNull
}

"""
Available conditions for input NestedB (only one property allowed at a time).
"""
input SearchByConditionNestedB {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionNestedB!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionNestedB!]
    @searchByOperatorAnyOf

    """
    Relationship condition.
    """
    nested: SearchByComplexRelationNestedC
    @searchByOperatorRelation

    """
    Not.
    """
    not: SearchByConditionNestedB
    @searchByOperatorNot
}

"""
Available conditions for input NestedC (only one property allowed at a time).
"""
input SearchByConditionNestedC {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionNestedC!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionNestedC!]
    @searchByOperatorAnyOf

    """
    Relationship condition.
    """
    nested: SearchByComplexRelationNestedB
    @searchByOperatorRelation

    """
    Not.
    """
    not: SearchByConditionNestedC
    @searchByOperatorNot
}

"""
Available operators for enum EnumA (only one operator allowed at a time).
"""
input SearchByEnumEnumA {
    """
    Equal (`=`).
    """
    equal: EnumA
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [EnumA!]
    @searchByOperatorIn

    """
    Not Equal (`!=`).
    """
    notEqual: EnumA
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [EnumA!]
    @searchByOperatorNotIn
}

"""
Available operators for enum EnumA (only one operator allowed at a time).
"""
input SearchByEnumEnumAOrNull {
    """
    Equal (`=`).
    """
    equal: EnumA
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [EnumA!]
    @searchByOperatorIn

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag
    @searchByOperatorIsNotNull

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
    @searchByOperatorIsNull

    """
    Not Equal (`!=`).
    """
    notEqual: EnumA
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [EnumA!]
    @searchByOperatorNotIn
}

"""
Available operators for scalar Boolean! (only one operator allowed at a time).
"""
input SearchByScalarBoolean {
    """
    Equal (`=`).
    """
    equal: Boolean
    @searchByOperatorEqual
}

"""
Available operators for scalar Boolean (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
    """
    Equal (`=`).
    """
    equal: Boolean
    @searchByOperatorEqual

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag
    @searchByOperatorIsNotNull

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
    @searchByOperatorIsNull
}

"""
Available operators for scalar Float! (only one operator allowed at a time).
"""
input SearchByScalarFloat {
    """
    Within a range.
    """
    between: SearchByTypeRangeFloat
    @searchByOperatorBetween

    """
    Equal (`=`).
    """
    equal: Float
    @searchByOperatorEqual

    """
    Greater than (`>`).
    """
    greaterThan: Float
    @searchByOperatorGreaterThan

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Float
    @searchByOperatorGreaterThanOrEqual

    """
    Within a set of values.
    """
    in: [Float!]
    @searchByOperatorIn

    """
    Less than (`<`).
    """
    lessThan: Float
    @searchByOperatorLessThan

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Float
    @searchByOperatorLessThanOrEqual

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeFloat
    @searchByOperatorNotBetween

    """
    Not Equal (`!=`).
    """
    notEqual: Float
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [Float!]
    @searchByOperatorNotIn
}

"""
Available operators for scalar Float (only one operator allowed at a time).
"""
input SearchByScalarFloatOrNull {
    """
    Within a range.
    """
    between: SearchByTypeRangeFloat
    @searchByOperatorBetween

    """
    Equal (`=`).
    """
    equal: Float
    @searchByOperatorEqual

    """
    Greater than (`>`).
    """
    greaterThan: Float
    @searchByOperatorGreaterThan

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Float
    @searchByOperatorGreaterThanOrEqual

    """
    Within a set of values.
    """
    in: [Float!]
    @searchByOperatorIn

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag
    @searchByOperatorIsNotNull

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
    @searchByOperatorIsNull

    """
    Less than (`<`).
    """
    lessThan: Float
    @searchByOperatorLessThan

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Float
    @searchByOperatorLessThanOrEqual

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeFloat
    @searchByOperatorNotBetween

    """
    Not Equal (`!=`).
    """
    notEqual: Float
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [Float!]
    @searchByOperatorNotIn
}

"""
Available operators for scalar ID! (only one operator allowed at a time).
"""
input SearchByScalarID {
    """
    Equal (`=`).
    """
    equal: ID
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [ID!]
    @searchByOperatorIn

    """
    Not Equal (`!=`).
    """
    notEqual: ID
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [ID!]
    @searchByOperatorNotIn
}

"""
Available operators for scalar ID (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
    """
    Equal (`=`).
    """
    equal: ID
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [ID!]
    @searchByOperatorIn

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag
    @searchByOperatorIsNotNull

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
    @searchByOperatorIsNull

    """
    Not Equal (`!=`).
    """
    notEqual: ID
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [ID!]
    @searchByOperatorNotIn
}

"""
Available operators for scalar Int! (only one operator allowed at a time).
"""
input SearchByScalarInt {
    """
    Within a range.
    """
    between: SearchByTypeRangeInt
    @searchByOperatorBetween

    """
    Equal (`=`).
    """
    equal: Int
    @searchByOperatorEqual

    """
    Greater than (`>`).
    """
    greaterThan: Int
    @searchByOperatorGreaterThan

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Int
    @searchByOperatorGreaterThanOrEqual

    """
    Within a set of values.
    """
    in: [Int!]
    @searchByOperatorIn

    """
    Less than (`<`).
    """
    lessThan: Int
    @searchByOperatorLessThan

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Int
    @searchByOperatorLessThanOrEqual

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeInt
    @searchByOperatorNotBetween

    """
    Not Equal (`!=`).
    """
    notEqual: Int
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [Int!]
    @searchByOperatorNotIn
}

"""
Available operators for scalar Int (only one operator allowed at a time).
"""
input SearchByScalarIntOrNull {
    """
    Within a range.
    """
    between: SearchByTypeRangeInt
    @searchByOperatorBetween

    """
    Equal (`=`).
    """
    equal: Int
    @searchByOperatorEqual

    """
    Greater than (`>`).
    """
    greaterThan: Int
    @searchByOperatorGreaterThan

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Int
    @searchByOperatorGreaterThanOrEqual

    """
    Within a set of values.
    """
    in: [Int!]
    @searchByOperatorIn

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag
    @searchByOperatorIsNotNull

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
    @searchByOperatorIsNull

    """
    Less than (`<`).
    """
    lessThan: Int
    @searchByOperatorLessThan

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Int
    @searchByOperatorLessThanOrEqual

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeInt
    @searchByOperatorNotBetween

    """
    Not Equal (`!=`).
    """
    notEqual: Int
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [Int!]
    @searchByOperatorNotIn
}

"""
Available operators for scalar String! (only one operator allowed at a time).
"""
input SearchByScalarString {
    """
    Contains.
    """
    contains: String
    @searchByOperatorContains

    """
    Ends with a string.
    """
    endsWith: String
    @searchByOperatorEndsWith

    """
    Equal (`=`).
    """
    equal: String
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [String!]
    @searchByOperatorIn

    """
    Like.
    """
    like: String
    @searchByOperatorLike

    """
    Not Equal (`!=`).
    """
    notEqual: String
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [String!]
    @searchByOperatorNotIn

    """
    Not like.
    """
    notLike: String
    @searchByOperatorNotLike

    """
    Starts with a string.
    """
    startsWith: String
    @searchByOperatorStartsWith
}

"""
Available operators for scalar String (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
    """
    Contains.
    """
    contains: String
    @searchByOperatorContains

    """
    Ends with a string.
    """
    endsWith: String
    @searchByOperatorEndsWith

    """
    Equal (`=`).
    """
    equal: String
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [String!]
    @searchByOperatorIn

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag
    @searchByOperatorIsNotNull

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
    @searchByOperatorIsNull

    """
    Like.
    """
    like: String
    @searchByOperatorLike

    """
    Not Equal (`!=`).
    """
    notEqual: String
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [String!]
    @searchByOperatorNotIn

    """
    Not like.
    """
    notLike: String
    @searchByOperatorNotLike

    """
    Starts with a string.
    """
    startsWith: String
    @searchByOperatorStartsWith
}

input SearchByTypeRangeFloat {
    max: Float!
    min: Float!
}

input SearchByTypeRangeInt {
    max: Int!
    min: Int!
}

type Query {
    a(
        where: SearchByConditionInputA
        @searchBy
    ): ID!
    @all

    b(
        where: SearchByConditionNestedA
        @searchBy
    ): ID!
    @all

    c(
        where: SearchByConditionInputB
        @searchBy
    ): ID!
    @all

    d(
        where: SearchByConditionNestedB
        @searchBy
    ): ID!
    @all
}

"""
Convert Input into Search Conditions.
"""
directive @searchBy
on
    | ARGUMENT_DEFINITION

directive @searchByOperatorAllOf
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorAnyOf
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorBetween
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorContains
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorEndsWith
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorEqual
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorGreaterThan
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorGreaterThanOrEqual
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorIn
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorIsNotNull
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorIsNull
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorLessThan
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorLessThanOrEqual
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorLike
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorNot
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorNotBetween
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorNotEqual
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorNotIn
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorNotLike
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorRelation
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorStartsWith
on
    | INPUT_FIELD_DEFINITION
