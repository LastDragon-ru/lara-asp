enum EnumA {
  one
  two
}

input InputA {
  idScalar: ID
  idScalarNotNull: ID!
  intScalar: Int
  inScalarNotNull: Int!
  floatScalar: Float
  floatScalarNotNull: Float!
  stringScalar: String
  stringScalarNotNull: String!
  booleanScalar: Boolean
  booleanScalarNotNull: Boolean!
  nested: NestedA
  nestedNotNull: NestedA!
  enum: EnumA
  enumNotNull: EnumA!
}

input InputB {
  id: ID
}

input NestedA {
  value: String
  nested: NestedA
}

input NestedB {
  nested: NestedC
}

input NestedC {
  nested: NestedB
}

type Query {
  a(where: SearchByConditionInputA): ID!
  b(where: SearchByConditionNestedA): ID!
  c(where: SearchByConditionInputB): ID!
  d(where: SearchByConditionNestedB): ID!
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedA.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedA {
  """Additional conditions."""
  where: SearchByConditionNestedA

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedB.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedB {
  """Additional conditions."""
  where: SearchByConditionNestedB

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input NestedC.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNestedC {
  """Additional conditions."""
  where: SearchByConditionNestedC

  """Count conditions."""
  count: SearchByScalarInt

  """
  Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
  """
  exists: Boolean

  """
  Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
  """
  notExists: Boolean! = false

  """Complex operator marker."""
  relation: SearchByTypeFlag! = yes
}

"""
Available conditions for input InputA (only one property allowed at a time).
"""
input SearchByConditionInputA {
  """All of the conditions must be true."""
  allOf: [SearchByConditionInputA!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionInputA!]

  """Not."""
  not: SearchByConditionInputA

  """Property condition."""
  idScalar: SearchByScalarIDOrNull

  """Property condition."""
  idScalarNotNull: SearchByScalarID

  """Property condition."""
  intScalar: SearchByScalarIntOrNull

  """Property condition."""
  inScalarNotNull: SearchByScalarInt

  """Property condition."""
  floatScalar: SearchByScalarFloatOrNull

  """Property condition."""
  floatScalarNotNull: SearchByScalarFloat

  """Property condition."""
  stringScalar: SearchByScalarStringOrNull

  """Property condition."""
  stringScalarNotNull: SearchByScalarString

  """Property condition."""
  booleanScalar: SearchByScalarBooleanOrNull

  """Property condition."""
  booleanScalarNotNull: SearchByScalarBoolean

  """Property condition."""
  nested: SearchByComplexRelationNestedA

  """Property condition."""
  nestedNotNull: SearchByComplexRelationNestedA

  """Property condition."""
  enum: SearchByEnumEnumAOrNull

  """Property condition."""
  enumNotNull: SearchByEnumEnumA
}

"""
Available conditions for input InputB (only one property allowed at a time).
"""
input SearchByConditionInputB {
  """All of the conditions must be true."""
  allOf: [SearchByConditionInputB!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionInputB!]

  """Not."""
  not: SearchByConditionInputB

  """Property condition."""
  id: SearchByScalarIDOrNull
}

"""
Available conditions for input NestedA (only one property allowed at a time).
"""
input SearchByConditionNestedA {
  """All of the conditions must be true."""
  allOf: [SearchByConditionNestedA!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionNestedA!]

  """Not."""
  not: SearchByConditionNestedA

  """Property condition."""
  value: SearchByScalarStringOrNull

  """Property condition."""
  nested: SearchByComplexRelationNestedA
}

"""
Available conditions for input NestedB (only one property allowed at a time).
"""
input SearchByConditionNestedB {
  """All of the conditions must be true."""
  allOf: [SearchByConditionNestedB!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionNestedB!]

  """Not."""
  not: SearchByConditionNestedB

  """Property condition."""
  nested: SearchByComplexRelationNestedC
}

"""
Available conditions for input NestedC (only one property allowed at a time).
"""
input SearchByConditionNestedC {
  """All of the conditions must be true."""
  allOf: [SearchByConditionNestedC!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionNestedC!]

  """Not."""
  not: SearchByConditionNestedC

  """Property condition."""
  nested: SearchByComplexRelationNestedB
}

"""
Available operators for enum EnumA (only one operator allowed at a time).
"""
input SearchByEnumEnumA {
  """Equal (`=`)."""
  equal: EnumA

  """Not Equal (`!=`)."""
  notEqual: EnumA

  """Within a set of values."""
  in: [EnumA!]

  """Outside a set of values."""
  notIn: [EnumA!]
}

"""
Available operators for enum EnumA (only one operator allowed at a time).
"""
input SearchByEnumEnumAOrNull {
  """Equal (`=`)."""
  equal: EnumA

  """Not Equal (`!=`)."""
  notEqual: EnumA

  """Within a set of values."""
  in: [EnumA!]

  """Outside a set of values."""
  notIn: [EnumA!]

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Boolean! (only one operator allowed at a time).
"""
input SearchByScalarBoolean {
  """Equal (`=`)."""
  equal: Boolean
}

"""
Available operators for scalar Boolean (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
  """Equal (`=`)."""
  equal: Boolean

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Float! (only one operator allowed at a time).
"""
input SearchByScalarFloat {
  """Equal (`=`)."""
  equal: Float

  """Not Equal (`!=`)."""
  notEqual: Float

  """Less than (`<`)."""
  lessThan: Float

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: Float

  """Greater than (`>`)."""
  greaterThan: Float

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: Float

  """Within a set of values."""
  in: [Float!]

  """Outside a set of values."""
  notIn: [Float!]

  """Within a range."""
  between: SearchByTypeRangeFloat

  """Outside a range."""
  notBetween: SearchByTypeRangeFloat
}

"""
Available operators for scalar Float (only one operator allowed at a time).
"""
input SearchByScalarFloatOrNull {
  """Equal (`=`)."""
  equal: Float

  """Not Equal (`!=`)."""
  notEqual: Float

  """Less than (`<`)."""
  lessThan: Float

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: Float

  """Greater than (`>`)."""
  greaterThan: Float

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: Float

  """Within a set of values."""
  in: [Float!]

  """Outside a set of values."""
  notIn: [Float!]

  """Within a range."""
  between: SearchByTypeRangeFloat

  """Outside a range."""
  notBetween: SearchByTypeRangeFloat

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar ID! (only one operator allowed at a time).
"""
input SearchByScalarID {
  """Equal (`=`)."""
  equal: ID

  """Not Equal (`!=`)."""
  notEqual: ID

  """Within a set of values."""
  in: [ID!]

  """Outside a set of values."""
  notIn: [ID!]
}

"""
Available operators for scalar ID (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
  """Equal (`=`)."""
  equal: ID

  """Not Equal (`!=`)."""
  notEqual: ID

  """Within a set of values."""
  in: [ID!]

  """Outside a set of values."""
  notIn: [ID!]

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Int! (only one operator allowed at a time).
"""
input SearchByScalarInt {
  """Equal (`=`)."""
  equal: Int

  """Not Equal (`!=`)."""
  notEqual: Int

  """Less than (`<`)."""
  lessThan: Int

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: Int

  """Greater than (`>`)."""
  greaterThan: Int

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: Int

  """Within a set of values."""
  in: [Int!]

  """Outside a set of values."""
  notIn: [Int!]

  """Within a range."""
  between: SearchByTypeRangeInt

  """Outside a range."""
  notBetween: SearchByTypeRangeInt
}

"""
Available operators for scalar Int (only one operator allowed at a time).
"""
input SearchByScalarIntOrNull {
  """Equal (`=`)."""
  equal: Int

  """Not Equal (`!=`)."""
  notEqual: Int

  """Less than (`<`)."""
  lessThan: Int

  """Less than or equal to (`<=`)."""
  lessThanOrEqual: Int

  """Greater than (`>`)."""
  greaterThan: Int

  """Greater than or equal to (`>=`)."""
  greaterThanOrEqual: Int

  """Within a set of values."""
  in: [Int!]

  """Outside a set of values."""
  notIn: [Int!]

  """Within a range."""
  between: SearchByTypeRangeInt

  """Outside a range."""
  notBetween: SearchByTypeRangeInt

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar String! (only one operator allowed at a time).
"""
input SearchByScalarString {
  """Equal (`=`)."""
  equal: String

  """Not Equal (`!=`)."""
  notEqual: String

  """Like."""
  like: String

  """Not like."""
  notLike: String

  """Within a set of values."""
  in: [String!]

  """Outside a set of values."""
  notIn: [String!]
}

"""
Available operators for scalar String (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
  """Equal (`=`)."""
  equal: String

  """Not Equal (`!=`)."""
  notEqual: String

  """Like."""
  like: String

  """Not like."""
  notLike: String

  """Within a set of values."""
  in: [String!]

  """Outside a set of values."""
  notIn: [String!]

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

enum SearchByTypeFlag {
  yes
}

input SearchByTypeRangeFloat {
  min: Float!
  max: Float!
}

input SearchByTypeRangeInt {
  min: Int!
  max: Int!
}
