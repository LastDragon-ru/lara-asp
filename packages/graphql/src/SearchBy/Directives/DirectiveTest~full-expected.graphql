input Nested {
  value: String
}

input Properties {
  idScalar: ID
  idScalarNotNull: ID!
  intScalar: Int
  inScalarNotNull: Int!
  floatScalar: Float
  floatScalarNotNull: Float!
  stringScalar: String
  stringScalarNotNull: String!
  booleanScalar: Boolean
  booleanScalarNotNull: Boolean!
  nested: Nested
  nestedNotNull: Nested!
  enum: Value
  enumNotNull: Value!
}

type Query {
  test(where: SearchByConditionProperties): ID!
}

"""
Conditions for the related objects (`has()`) for input Nested.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationNested {
  relation: SearchByTypeFlag! = yes
  where: SearchByConditionNested
  count: SearchByScalarInt

  """
  Shortcut for `doesntHave()`, same as:
  
  ```
  where: [...]
  count: {
    lt: 1
  }
  ```
  """
  not: Boolean! = false
}

"""
Available conditions for input Nested (only one property allowed at a time).
"""
input SearchByConditionNested {
  """All of the conditions must be true."""
  allOf: [SearchByConditionNested!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionNested!]

  """Not."""
  not: SearchByConditionNested

  """Property condition."""
  value: SearchByScalarStringOrNull
}

"""
Available conditions for input Properties (only one property allowed at a time).
"""
input SearchByConditionProperties {
  """All of the conditions must be true."""
  allOf: [SearchByConditionProperties!]

  """Any of the conditions must be true."""
  anyOf: [SearchByConditionProperties!]

  """Not."""
  not: SearchByConditionProperties

  """Property condition."""
  idScalar: SearchByScalarIDOrNull

  """Property condition."""
  idScalarNotNull: SearchByScalarID

  """Property condition."""
  intScalar: SearchByScalarIntOrNull

  """Property condition."""
  inScalarNotNull: SearchByScalarInt

  """Property condition."""
  floatScalar: SearchByScalarFloatOrNull

  """Property condition."""
  floatScalarNotNull: SearchByScalarFloat

  """Property condition."""
  stringScalar: SearchByScalarStringOrNull

  """Property condition."""
  stringScalarNotNull: SearchByScalarString

  """Property condition."""
  booleanScalar: SearchByScalarBooleanOrNull

  """Property condition."""
  booleanScalarNotNull: SearchByScalarBoolean

  """Property condition."""
  nested: SearchByComplexRelationNested

  """Property condition."""
  nestedNotNull: SearchByComplexRelationNested

  """Property condition."""
  enum: SearchByEnumValueOrNull

  """Property condition."""
  enumNotNull: SearchByEnumValue
}

"""
Available operators for enum Value (only one operator allowed at a time).
"""
input SearchByEnumValue {
  """Equal (`=`)."""
  equal: Value

  """Not Equal (`!=`)."""
  notEqual: Value

  """Within a set of values."""
  in: [Value!]

  """Outside a set of values."""
  notIn: [Value!]
}

"""
Available operators for enum Value (only one operator allowed at a time).
"""
input SearchByEnumValueOrNull {
  """Equal (`=`)."""
  equal: Value

  """Not Equal (`!=`)."""
  notEqual: Value

  """Within a set of values."""
  in: [Value!]

  """Outside a set of values."""
  notIn: [Value!]

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Boolean! (only one operator allowed at a time).
"""
input SearchByScalarBoolean {
  """Equal (`=`)."""
  equal: Boolean
}

"""
Available operators for scalar Boolean (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
  """Equal (`=`)."""
  equal: Boolean

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Float! (only one operator allowed at a time).
"""
input SearchByScalarFloat {
  """Equal (`=`)."""
  equal: Float

  """Not Equal (`!=`)."""
  notEqual: Float

  """Less than (`<`)."""
  lt: Float

  """Less than or equal to (`<=`)."""
  lte: Float

  """Greater than (`>`)."""
  gt: Float

  """Greater than or equal to (`>=`)."""
  gte: Float

  """Within a set of values."""
  in: [Float!]

  """Outside a set of values."""
  notIn: [Float!]

  """Within a range."""
  between: SearchByTypeRangeFloat

  """Outside a range."""
  notBetween: SearchByTypeRangeFloat
}

"""
Available operators for scalar Float (only one operator allowed at a time).
"""
input SearchByScalarFloatOrNull {
  """Equal (`=`)."""
  equal: Float

  """Not Equal (`!=`)."""
  notEqual: Float

  """Less than (`<`)."""
  lt: Float

  """Less than or equal to (`<=`)."""
  lte: Float

  """Greater than (`>`)."""
  gt: Float

  """Greater than or equal to (`>=`)."""
  gte: Float

  """Within a set of values."""
  in: [Float!]

  """Outside a set of values."""
  notIn: [Float!]

  """Within a range."""
  between: SearchByTypeRangeFloat

  """Outside a range."""
  notBetween: SearchByTypeRangeFloat

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar ID! (only one operator allowed at a time).
"""
input SearchByScalarID {
  """Equal (`=`)."""
  equal: ID

  """Not Equal (`!=`)."""
  notEqual: ID

  """Within a set of values."""
  in: [ID!]

  """Outside a set of values."""
  notIn: [ID!]
}

"""
Available operators for scalar ID (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
  """Equal (`=`)."""
  equal: ID

  """Not Equal (`!=`)."""
  notEqual: ID

  """Within a set of values."""
  in: [ID!]

  """Outside a set of values."""
  notIn: [ID!]

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar Int! (only one operator allowed at a time).
"""
input SearchByScalarInt {
  """Equal (`=`)."""
  equal: Int

  """Not Equal (`!=`)."""
  notEqual: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Within a set of values."""
  in: [Int!]

  """Outside a set of values."""
  notIn: [Int!]

  """Within a range."""
  between: SearchByTypeRangeInt

  """Outside a range."""
  notBetween: SearchByTypeRangeInt
}

"""
Available operators for scalar Int (only one operator allowed at a time).
"""
input SearchByScalarIntOrNull {
  """Equal (`=`)."""
  equal: Int

  """Not Equal (`!=`)."""
  notEqual: Int

  """Less than (`<`)."""
  lt: Int

  """Less than or equal to (`<=`)."""
  lte: Int

  """Greater than (`>`)."""
  gt: Int

  """Greater than or equal to (`>=`)."""
  gte: Int

  """Within a set of values."""
  in: [Int!]

  """Outside a set of values."""
  notIn: [Int!]

  """Within a range."""
  between: SearchByTypeRangeInt

  """Outside a range."""
  notBetween: SearchByTypeRangeInt

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

"""
Available operators for scalar String! (only one operator allowed at a time).
"""
input SearchByScalarString {
  """Equal (`=`)."""
  equal: String

  """Not Equal (`!=`)."""
  notEqual: String

  """Like."""
  like: String

  """Not like."""
  notLike: String

  """Within a set of values."""
  in: [String!]

  """Outside a set of values."""
  notIn: [String!]
}

"""
Available operators for scalar String (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
  """Equal (`=`)."""
  equal: String

  """Not Equal (`!=`)."""
  notEqual: String

  """Like."""
  like: String

  """Not like."""
  notLike: String

  """Within a set of values."""
  in: [String!]

  """Outside a set of values."""
  notIn: [String!]

  """Is NULL?"""
  isNull: SearchByTypeFlag

  """Is NOT NULL?"""
  isNotNull: SearchByTypeFlag
}

enum SearchByTypeFlag {
  yes
}

input SearchByTypeRangeFloat {
  min: Float!
  max: Float!
}

input SearchByTypeRangeInt {
  min: Int!
  max: Int!
}

enum Value {
  one
  two
}
