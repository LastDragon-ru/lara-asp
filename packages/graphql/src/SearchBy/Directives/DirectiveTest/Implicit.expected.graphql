"""
Use Input as Search Conditions for the current Builder.
"""
directive @searchBy
on
    | ARGUMENT_DEFINITION

directive @searchByOperatorAllOf
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorAnyOf
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorBetween
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorBitwiseAnd
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorBitwiseLeftShift
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorBitwiseOr
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorBitwiseRightShift
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorBitwiseXor
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorContains
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorEndsWith
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorGreaterThan
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorGreaterThanOrEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorIn
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorIsNotNull
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorIsNull
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorLessThan
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorLessThanOrEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorLike
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNot
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotBetween
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotContains
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotEndsWith
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotIn
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotLike
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotStartsWith
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorProperty
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorRelation
on
    | ENUM
    | FIELD_DEFINITION
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorStartsWith
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Options for the `type` argument of `@hasMany`.
"""
enum HasManyType {
    """
    Cursor-based pagination, compatible with the Relay specification.
    """
    CONNECTION

    """
    Offset-based pagination, similar to the Laravel default.
    """
    PAGINATOR

    """
    Offset-based pagination like the Laravel "Simple Pagination", which does not count the total number of records.
    """
    SIMPLE
}

enum SearchByTypeFlag {
    Yes

    yes
    @deprecated(
        reason: "Please use `Yes` instead."
    )
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `type A`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationA {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionA
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for `type B`.

See also:
* https://laravel.com/docs/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationB {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}`. Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}`. Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Additional conditions.
    """
    where: SearchByConditionB
}

"""
Available conditions for `type A` (only one property allowed at a time).
"""
input SearchByConditionA {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionA!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionA!]
    @searchByOperatorAnyOf

    """
    Property condition.
    """
    id: SearchByScalarID
    @searchByOperatorProperty

    """
    Property condition.
    """
    name: SearchByScalarString
    @searchByOperatorProperty

    """
    Not.
    """
    not: SearchByConditionA
    @searchByOperatorNot

    """
    Relationship condition.
    """
    relation: SearchByComplexRelationB
    @searchByOperatorRelation

    """
    Relationship condition.
    """
    relationWithArgs: SearchByComplexRelationA
    @searchByOperatorRelation

    """
    Relationship condition.
    """
    relations: SearchByComplexRelationB
    @searchByOperatorRelation

    """
    Relationship condition.
    """
    relationsWithArgs: SearchByComplexRelationA
    @searchByOperatorRelation
}

"""
Available conditions for `type B` (only one property allowed at a time).
"""
input SearchByConditionB {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionB!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionB!]
    @searchByOperatorAnyOf

    """
    Property condition.
    """
    id: SearchByScalarID
    @searchByOperatorProperty

    """
    Property condition.
    """
    name: SearchByScalarStringOrNull
    @searchByOperatorProperty

    """
    Not.
    """
    not: SearchByConditionB
    @searchByOperatorNot

    """
    Relationship condition.
    """
    parent: SearchByComplexRelationA
    @searchByOperatorRelation
}

"""
Available conditions for `interface C` (only one property allowed at a time).
"""
input SearchByConditionC {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionC!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionC!]
    @searchByOperatorAnyOf

    """
    Property condition.
    """
    id: SearchByScalarID
    @searchByOperatorProperty

    """
    Property condition.
    """
    name: SearchByScalarString
    @searchByOperatorProperty

    """
    Not.
    """
    not: SearchByConditionC
    @searchByOperatorNot

    """
    Relationship condition.
    """
    relation: SearchByComplexRelationB
    @searchByOperatorRelation

    """
    Relationship condition.
    """
    relationWithArgs: SearchByComplexRelationA
    @searchByOperatorRelation

    """
    Relationship condition.
    """
    relations: SearchByComplexRelationB
    @searchByOperatorRelation

    """
    Relationship condition.
    """
    relationsWithArgs: SearchByComplexRelationA
    @searchByOperatorRelation
}

"""
Available operators for `scalar ID` (only one operator allowed at a time).
"""
input SearchByScalarID {
    """
    Equal (`=`).
    """
    equal: ID
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [ID!]
    @searchByOperatorIn

    """
    Not Equal (`!=`).
    """
    notEqual: ID
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [ID!]
    @searchByOperatorNotIn
}

"""
Available operators for `scalar Int` (only one operator allowed at a time).
"""
input SearchByScalarInt {
    """
    Within a range.
    """
    between: SearchByTypeRangeInt
    @searchByOperatorBetween

    """
    Bitwise AND (`&`).
    """
    bitwiseAnd: Int
    @searchByOperatorBitwiseAnd

    """
    Bitwise Left shift (`<<`).
    """
    bitwiseLeftShift: Int
    @searchByOperatorBitwiseLeftShift

    """
    Bitwise OR (`|`).
    """
    bitwiseOr: Int
    @searchByOperatorBitwiseOr

    """
    Bitwise Right shift (`>>`).
    """
    bitwiseRightShift: Int
    @searchByOperatorBitwiseRightShift

    """
    Bitwise XOR (`^`).
    """
    bitwiseXor: Int
    @searchByOperatorBitwiseXor

    """
    Equal (`=`).
    """
    equal: Int
    @searchByOperatorEqual

    """
    Greater than (`>`).
    """
    greaterThan: Int
    @searchByOperatorGreaterThan

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Int
    @searchByOperatorGreaterThanOrEqual

    """
    Within a set of values.
    """
    in: [Int!]
    @searchByOperatorIn

    """
    Less than (`<`).
    """
    lessThan: Int
    @searchByOperatorLessThan

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Int
    @searchByOperatorLessThanOrEqual

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeInt
    @searchByOperatorNotBetween

    """
    Not Equal (`!=`).
    """
    notEqual: Int
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [Int!]
    @searchByOperatorNotIn
}

"""
Available operators for `scalar String` (only one operator allowed at a time).
"""
input SearchByScalarString {
    """
    Contains.
    """
    contains: String
    @searchByOperatorContains

    """
    Ends with a string.
    """
    endsWith: String
    @searchByOperatorEndsWith

    """
    Equal (`=`).
    """
    equal: String
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [String!]
    @searchByOperatorIn

    """
    Like.
    """
    like: String
    @searchByOperatorLike

    """
    Not contains.
    """
    notContains: String
    @searchByOperatorNotContains

    """
    Not ends with a string.
    """
    notEndsWith: String
    @searchByOperatorNotEndsWith

    """
    Not Equal (`!=`).
    """
    notEqual: String
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [String!]
    @searchByOperatorNotIn

    """
    Not like.
    """
    notLike: String
    @searchByOperatorNotLike

    """
    Not starts with a string.
    """
    notStartsWith: String
    @searchByOperatorNotStartsWith

    """
    Starts with a string.
    """
    startsWith: String
    @searchByOperatorStartsWith
}

"""
Available operators for `scalar String` (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
    """
    Contains.
    """
    contains: String
    @searchByOperatorContains

    """
    Ends with a string.
    """
    endsWith: String
    @searchByOperatorEndsWith

    """
    Equal (`=`).
    """
    equal: String
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [String!]
    @searchByOperatorIn

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag
    @searchByOperatorIsNotNull

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
    @searchByOperatorIsNull

    """
    Like.
    """
    like: String
    @searchByOperatorLike

    """
    Not contains.
    """
    notContains: String
    @searchByOperatorNotContains

    """
    Not ends with a string.
    """
    notEndsWith: String
    @searchByOperatorNotEndsWith

    """
    Not Equal (`!=`).
    """
    notEqual: String
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [String!]
    @searchByOperatorNotIn

    """
    Not like.
    """
    notLike: String
    @searchByOperatorNotLike

    """
    Not starts with a string.
    """
    notStartsWith: String
    @searchByOperatorNotStartsWith

    """
    Starts with a string.
    """
    startsWith: String
    @searchByOperatorStartsWith
}

input SearchByTypeRangeInt {
    max: Int!
    min: Int!
}

interface C {
    field: B!
    fields: [B!]!

    """
    Description should be ignored.
    """
    id: ID!

    name: String!

    property(
        arg: String
    ): Int!

    relation: B!
    @hasOne

    relationWithArgs(
        arg: String
    ): A!
    @hasOne

    relations: [B!]!
    @hasMany

    relationsPaginated(
        """
        Limits number of fetched items.
        """
        first: Int!

        """
        The offset from which items are returned.
        """
        page: Int
    ): BPaginator!
    @hasMany(
        type: PAGINATOR
    )

    relationsPaginatedWithArgs(
        arg: String

        """
        Limits number of fetched items.
        """
        first: Int!

        """
        The offset from which items are returned.
        """
        page: Int
    ): BPaginator!
    @hasMany(
        type: PAGINATOR
    )

    relationsWithArgs(
        arg: String
    ): [A!]
    @hasMany

    resolver: Int!
    @field(
        resolver: "\\LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Directives\\DirectiveTest__Resolver"
    )
}

type A {
    field: B!
    fields: [B!]!

    """
    Description should be ignored.
    """
    id: ID!

    name: String!

    property(
        arg: String
    ): Int!

    relation: B!
    @hasOne

    relationWithArgs(
        arg: String
    ): A!
    @hasOne

    relations: [B!]!
    @hasMany

    relationsPaginated(
        """
        Limits number of fetched items.
        """
        first: Int!

        """
        The offset from which items are returned.
        """
        page: Int
    ): BPaginator!
    @hasMany(
        type: PAGINATOR
    )

    relationsPaginatedWithArgs(
        arg: String

        """
        Limits number of fetched items.
        """
        first: Int!

        """
        The offset from which items are returned.
        """
        page: Int
    ): BPaginator!
    @hasMany(
        type: PAGINATOR
    )

    relationsWithArgs(
        arg: String
    ): [A!]
    @hasMany

    resolver: Int!
    @field(
        resolver: "\\LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Directives\\DirectiveTest__Resolver"
    )
}

"""
A paginated list of A items.
"""
type APaginator
@model(
    class: "LastDragon_ru\\LaraASP\\GraphQL\\Testing\\Package\\Data\\Models\\TestObject"
)
{
    """
    A list of A items.
    """
    data: [A!]!
    @field(
        resolver: "Nuwave\\Lighthouse\\Pagination\\PaginatorField@dataResolver"
    )

    """
    Pagination information about the list of items.
    """
    paginatorInfo: PaginatorInfo!
    @field(
        resolver: "Nuwave\\Lighthouse\\Pagination\\PaginatorField@paginatorInfoResolver"
    )
}

type B {
    """
    Description should be ignored.
    """
    id: ID!

    name: String

    parent: A!
    @hasOne
}

"""
A paginated list of B items.
"""
type BPaginator {
    """
    A list of B items.
    """
    data: [B!]!
    @field(
        resolver: "Nuwave\\Lighthouse\\Pagination\\PaginatorField@dataResolver"
    )

    """
    Pagination information about the list of items.
    """
    paginatorInfo: PaginatorInfo!
    @field(
        resolver: "Nuwave\\Lighthouse\\Pagination\\PaginatorField@paginatorInfoResolver"
    )
}

"""
Information about pagination using a fully featured paginator.
"""
type PaginatorInfo {
    """
    Number of items in the current page.
    """
    count: Int!

    """
    Index of the current page.
    """
    currentPage: Int!

    """
    Index of the first item in the current page.
    """
    firstItem: Int

    """
    Are there more pages after this one?
    """
    hasMorePages: Boolean!

    """
    Index of the last item in the current page.
    """
    lastItem: Int

    """
    Index of the last available page.
    """
    lastPage: Int!

    """
    Number of items per page.
    """
    perPage: Int!

    """
    Number of total available items.
    """
    total: Int!
}

type Query {
    a(
        where: SearchByConditionA
        @searchBy
    ): [A!]!
    @all

    b(
        where: SearchByConditionA
        @searchBy

        """
        Limits number of fetched items.
        """
        first: Int!

        """
        The offset from which items are returned.
        """
        page: Int
    ): APaginator!
    @paginate(
        model: "LastDragon_ru\\LaraASP\\GraphQL\\Testing\\Package\\Data\\Models\\TestObject"
    )

    c(
        where: SearchByConditionC
        @searchBy
    ): [C!]!
    @all
}
