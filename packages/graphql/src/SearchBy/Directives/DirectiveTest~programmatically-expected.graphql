enum SearchByTypeFlag {
    yes
}

enum TestEnum {
    """
    test property
    """
    property
}

"""
Conditions for the related objects (`has()`/`doesntHave()`) for input TestTypeA.

See also:
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-existence
* https://laravel.com/docs/8.x/eloquent-relationships#querying-relationship-absence
"""
input SearchByComplexRelationTestTypeA {
    """
    Count conditions.
    """
    count: SearchByScalarInt

    """
    Alias for `count: {greaterThanOrEqual: 1}` (`has()`). Will be ignored if `count` used.
    """
    exists: Boolean

    """
    Alias for `count: {lessThan: 1}` (`doesntHave()`). Will be ignored if `count` used.
    """
    notExists: Boolean! = false

    """
    Complex operator marker.
    """
    relation: SearchByTypeFlag! = yes

    """
    Additional conditions.
    """
    where: SearchByConditionTestTypeA
}

"""
Available conditions for input TestTypeA (only one property allowed at a time).
"""
input SearchByConditionTestTypeA {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionTestTypeA!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionTestTypeA!]

    """
    Property condition.
    """
    flag: SearchByScalarBooleanOrNull

    """
    Property condition.
    """
    name: SearchByScalarStringOrNull

    """
    Not.
    """
    not: SearchByConditionTestTypeA

    """
    Property condition.
    """
    value: SearchByEnumTestEnumOrNull
}

"""
Available conditions for input TestTypeB (only one property allowed at a time).
"""
input SearchByConditionTestTypeB {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionTestTypeB!]

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionTestTypeB!]

    """
    Property condition.
    """
    child: SearchByComplexRelationTestTypeA

    """
    Property condition.
    """
    name: SearchByScalarString

    """
    Not.
    """
    not: SearchByConditionTestTypeB
}

"""
Available operators for enum TestEnum (only one operator allowed at a time).
"""
input SearchByEnumTestEnumOrNull {
    """
    Equal (`=`).
    """
    equal: TestEnum

    """
    Within a set of values.
    """
    in: [TestEnum!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Not Equal (`!=`).
    """
    notEqual: TestEnum

    """
    Outside a set of values.
    """
    notIn: [TestEnum!]
}

"""
Available operators for scalar Boolean (only one operator allowed at a time).
"""
input SearchByScalarBooleanOrNull {
    """
    Equal (`=`).
    """
    equal: Boolean

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
}

"""
Available operators for scalar Int! (only one operator allowed at a time).
"""
input SearchByScalarInt {
    """
    Within a range.
    """
    between: SearchByTypeRangeInt

    """
    Equal (`=`).
    """
    equal: Int

    """
    Greater than (`>`).
    """
    greaterThan: Int

    """
    Greater than or equal to (`>=`).
    """
    greaterThanOrEqual: Int

    """
    Within a set of values.
    """
    in: [Int!]

    """
    Less than (`<`).
    """
    lessThan: Int

    """
    Less than or equal to (`<=`).
    """
    lessThanOrEqual: Int

    """
    Outside a range.
    """
    notBetween: SearchByTypeRangeInt

    """
    Not Equal (`!=`).
    """
    notEqual: Int

    """
    Outside a set of values.
    """
    notIn: [Int!]
}

"""
Available operators for scalar String! (only one operator allowed at a time).
"""
input SearchByScalarString {
    """
    Contains.
    """
    contains: String

    """
    Ends with a string.
    """
    endsWith: String

    """
    Equal (`=`).
    """
    equal: String

    """
    Within a set of values.
    """
    in: [String!]

    """
    Like.
    """
    like: String

    """
    Not Equal (`!=`).
    """
    notEqual: String

    """
    Outside a set of values.
    """
    notIn: [String!]

    """
    Not like.
    """
    notLike: String

    """
    Starts with a string.
    """
    startsWith: String
}

"""
Available operators for scalar String (only one operator allowed at a time).
"""
input SearchByScalarStringOrNull {
    """
    Contains.
    """
    contains: String

    """
    Ends with a string.
    """
    endsWith: String

    """
    Equal (`=`).
    """
    equal: String

    """
    Within a set of values.
    """
    in: [String!]

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag

    """
    Like.
    """
    like: String

    """
    Not Equal (`!=`).
    """
    notEqual: String

    """
    Outside a set of values.
    """
    notIn: [String!]

    """
    Not like.
    """
    notLike: String

    """
    Starts with a string.
    """
    startsWith: String
}

input SearchByTypeRangeInt {
    max: Int!
    min: Int!
}

type Query {
    a(
        where: SearchByConditionTestTypeB
        @searchBy(
            operators: [
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AllOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\AnyOf"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Logical\\Not"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Complex\\Relation"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Equal"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Like"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotLike"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\In"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotIn"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Contains"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\StartsWith"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\EndsWith"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\LessThan"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\LessThanOrEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\GreaterThan"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\GreaterThanOrEqual"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\Between"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\NotBetween"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\IsNull"
                "LastDragon_ru\\LaraASP\\GraphQL\\SearchBy\\Operators\\Comparison\\IsNotNull"
            ]
        )
    ): ID!
}

"""
Convert Input into Search Conditions.
"""
directive @searchBy
on
    | ARGUMENT_DEFINITION
