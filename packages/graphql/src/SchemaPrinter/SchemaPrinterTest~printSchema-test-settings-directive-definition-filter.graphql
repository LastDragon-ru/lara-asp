enum CodeEnum {
    A
    B
    C
}

enum SchemaEnum
@schemaDirective
@codeDirective
{
    A
    @deprecated

    """
    Description
    """
    B
}

"""
Description
"""
input CodeInput
@schemaDirective
{
    a: Boolean
}

input SchemaInput
@schemaDirective
{
    a: CodeScalar
    b: CodeEnum
    c: SchemaScalar
    d: SchemaEnum

    """
    Recursion
    """
    e: SchemaInput

    f: [String!]
}

"""
Description
"""
interface CodeInterface
@codeDirective
{
    a: Boolean!
}

interface SchemaInterfaceA {
    a: Boolean!
}

"""
Interface description.
"""
interface SchemaInterfaceB
implements
    & CodeInterface
    & SchemaInterfaceA
@schemaDirective
{
    a: Boolean!

    """
    Deprecated field
    """
    b: [String]!
    @deprecated

    c(
        """
        aaa
        """
        a: String

        """
        bbb
        """
        b: [SchemaScalar!]!

        c: SchemaEnum
    ): CodeUnion

    d: CodeScalar
    e: CodeEnum
}

"""
The `String` scalar type represents textual data, represented as UTF-8
character sequences. The String type is most often used by GraphQL to
represent free-form human-readable text.
"""
scalar CodeScalar

"""
The `String` scalar type represents textual data, represented as UTF-8
character sequences. The String type is most often used by GraphQL to
represent free-form human-readable text.
"""
scalar SchemaScalar
@scalar(
    class: "GraphQL\\Type\\Definition\\StringType"
)
@codeDirective

"""
Description
"""
type CodeType
@schemaDirective
{
    a: Boolean
}

type Query {
    a: SchemaType
    @deprecated(
        reason: "deprecated reason"
    )
    @codeDirective
    @mock

    b: SchemaEnum
    @deprecated
    @mock

    c(
        a: SchemaInput = {
            a: "aaa"
            b: A
            c: "ccc"
            d: A
            e: {
                a: "aaa"
                b: A
                c: "ccc"
                d: A
                f: ["aaa", "bbb", "ccc", "ddd"]
            }
        }
    ): CodeScalar
    @mock

    d(
        a: SchemaInput = {}
    ): CodeType
    @mock
}

type SchemaType
implements
    & SchemaInterfaceB
@schemaDirective
{
    a: Boolean!

    """
    Deprecated field
    """
    b: [String]!
    @deprecated

    c(
        """
        aaa
        """
        a: String

        """
        bbb
        """
        b: [SchemaScalar!]!

        c: CodeInput
    ): CodeUnion

    d: CodeScalar
    e: CodeEnum

    f(
        a: [String!] = [
            "very very very long line of text"
            "very very very long line of text"
            "very very very long line of text"
        ]
    ): SchemaUnion
}

union CodeUnion =
    | CodeType

union SchemaUnion
@schemaDirective
=
    | CodeType
    | SchemaType

"""
Directive
"""
directive @schemaDirective(
    """
    Directive argument
    """
    message: String
)
on
    | ARGUMENT_DEFINITION
    | FIELD
    | INPUT_OBJECT
    | INTERFACE
    | OBJECT
    | SCALAR
    | SCHEMA
    | UNION
