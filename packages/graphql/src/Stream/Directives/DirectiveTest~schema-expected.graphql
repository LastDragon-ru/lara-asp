"""
Use Input as Search Conditions for the current Builder.
"""
directive @searchBy
on
    | ARGUMENT_DEFINITION

directive @searchByOperatorAllOf
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorAnyOf
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorCondition
on
    | INPUT_FIELD_DEFINITION

directive @searchByOperatorEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorField
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNot
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Use Input as Sort Conditions for the current Builder.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

directive @sortByOperatorField
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorNullsFirst
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorNullsLast
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorSort
on
    | INPUT_FIELD_DEFINITION

"""
Splits list of items into the chunks and returns one chunk specified
by an offset or a cursor.
"""
directive @stream(
    """
    Overrides default searchable status.
    """
    searchable: Boolean

    """
    Overrides default sortable status.
    """
    sortable: Boolean

    """
    Overrides default builder. Useful if the standard detection
    algorithm doesn't fit/work. By default, the directive will use
    the field and its type to determine the Builder to query.
    """
    builder: StreamBuilder

    """
    Overrides default limit.
    """
    limit: Int

    """
    Overrides default unique key. Useful if the standard detection
    algorithm doesn't fit/work. By default, the directive will use
    the name of field with `ID!` type.
    """
    key: String
)
on
    | FIELD_DEFINITION

directive @streamLimit(
    default: Int
    max: Int
)
on
    | ARGUMENT_DEFINITION

directive @streamOffset
on
    | ARGUMENT_DEFINITION

"""
Converts scalar into GraphQL Type. Similar to Lighthouse's `@scalar`
directive, but uses Laravel Container to resolve instance and also
supports PHP enums.
"""
directive @type(
    """
    Reference to a PHP Class/Enum (FQN).

    If not PHP Enum, the Laravel Container with the following additional
    arguments will be used to resolver the instance:

    * `string $name` - the type name.
    * `GraphQL\Language\AST\ScalarTypeDefinitionNode $node` - the AST node.
    * `array&ScalarConfig $config` - the scalar configuration (if `GraphQL\Type\Definition\ScalarType`).

    Resolved instance must be an `GraphQL\Type\Definition\Type&GraphQL\Type\Definition\NamedType` and have a name equal
    to `$name` argument.
    """
    class: String!
)
on
    | SCALAR

"""
Sort direction.
"""
enum SortByTypeDirection {
    Asc
    Desc
}

"""
Available conditions for `type TestObject` (only one field allowed at a time).
"""
input SearchByConditionTestObject {
    """
    Field condition.
    """
    id: SearchByScalarID
    @searchByOperatorCondition
}

"""
Available conditions for `type TestObject` (only one field allowed at a time).
"""
input SearchByRootTestObject {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByRootTestObject!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByRootTestObject!]
    @searchByOperatorAnyOf

    """
    Field.
    """
    field: SearchByConditionTestObject
    @searchByOperatorField

    """
    Not.
    """
    not: SearchByRootTestObject
    @searchByOperatorNot
}

"""
Available operators for `scalar ID` (only one operator allowed at a time).
"""
input SearchByScalarID {
    """
    Equal (`=`).
    """
    equal: ID
    @searchByOperatorEqual
}

"""
Sort clause for `type TestObject` (only one field allowed at a time).
"""
input SortByClauseTestObject {
    """
    Field clause.
    """
    id: SortByTypeDirection
    @sortByOperatorSort
}

"""
Sort clause for `type TestObject` (only one field allowed at a time).
"""
input SortByRootTestObject {
    """
    Field.
    """
    field: SortByClauseTestObject
    @sortByOperatorField

    """
    NULLs first
    """
    nullsFirst: SortByClauseTestObject
    @sortByOperatorNullsFirst

    """
    NULLs last
    """
    nullsLast: SortByClauseTestObject
    @sortByOperatorNullsLast
}

"""
Explicit builder. Only one of fields allowed.
"""
input StreamBuilder {
    """
    The reference to a function that provides a Builder instance.
    """
    builder: String

    """
    The class name of the model to query.
    """
    model: String

    """
    The relation name to query.
    """
    relation: String
}

interface InterfaceA {
    fieldWithArguments(
        argument: String
        where: SearchByRootTestObject
        order: [SortByRootTestObject!]
        limit: Int!
        offset: StreamOffset
    ): TestObjectsStream!
}

interface InterfaceB
implements
    & InterfaceC
{
    fieldNotSearchable(
        order: [SortByRootTestObject!]
        limit: Int!
        offset: StreamOffset
    ): TestObjectsStream!

    fieldWithDirectives(
        a: SearchByRootTestObject
        b: [SortByRootTestObject!]
        c: Int!
        d: StreamOffset
    ): TestObjectsStream!
}

interface InterfaceC {
    fieldWithDirectives(
        a: SearchByRootTestObject
        b: [SortByRootTestObject!]
        c: Int!
        d: StreamOffset
    ): TestObjectsStream!
}

"""
Represents a offset for the `@stream` directive. The value can be a
positive `Int` or a `String`. The `Int` value represents the offset
(zero-based) to navigate to any position within the stream (= offset
pagination). And the `String` value represents the cursor and allows
navigation only to the previous/current/next pages (= cursor
pagination).
"""
scalar StreamOffset
@type(
    class: "LastDragon_ru\\LaraASP\\GraphQL\\Stream\\Scalars\\Offset"
)

type Query
implements
    & InterfaceA
    & InterfaceB
    & InterfaceC
{
    fieldNotSearchable(
        order: [SortByRootTestObject!]
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        """
        The cursor or offset within the stream to start.
        """
        offset: StreamOffset
        @streamOffset
    ): TestObjectsStream!
    @stream(
        searchable: false
    )
    @validate

    fieldNotSortable(
        where: SearchByRootTestObject
        @searchBy

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        """
        The cursor or offset within the stream to start.
        """
        offset: StreamOffset
        @streamOffset
    ): TestObjectsStream!
    @stream(
        sortable: false
    )
    @validate

    fieldWithArguments(
        argument: String

        where: SearchByRootTestObject
        @searchBy

        order: [SortByRootTestObject!]
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        """
        The cursor or offset within the stream to start.
        """
        offset: StreamOffset
        @streamOffset
    ): TestObjectsStream!
    @stream
    @validate

    fieldWithDeprecations(
        a: SearchByRootTestObject
        @deprecated
        @searchBy

        b: [SortByRootTestObject!]
        @deprecated
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `123`.
        """
        c: Int! = 15
        @deprecated
        @streamLimit(
            default: 15
            max: 123
        )
        @rules(
            apply: ["integer", "min:1", "max:123"]
        )

        """
        The cursor or offset within the stream to start.
        """
        d: StreamOffset
        @deprecated
        @streamOffset

        where: SearchByRootTestObject
        @searchBy

        order: [SortByRootTestObject!]
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 15
        @streamLimit(
            default: 15
        )
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        """
        The cursor or offset within the stream to start.
        """
        offset: StreamOffset
        @streamOffset
    ): TestObjectsStream!
    @stream(
        limit: 15
    )
    @validate

    fieldWithDirectives(
        a: SearchByRootTestObject
        @searchBy

        b: [SortByRootTestObject!]
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `10`.
        """
        c: Int! = 10
        @streamLimit(
            default: 15
            max: 10
        )
        @rules(
            apply: ["integer", "min:1", "max:10"]
        )

        """
        The cursor or offset within the stream to start.
        """
        d: StreamOffset
        @streamOffset
    ): TestObjectsStream!
    @stream
    @validate

    fieldWithDirectivesAndDefaults(
        a: SearchByRootTestObject
        @searchBy

        b: [SortByRootTestObject!]
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        c: Int! = 15
        @streamLimit(
            default: 15
        )
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        """
        The cursor or offset within the stream to start.
        """
        d: StreamOffset
        @streamOffset
    ): TestObjectsStream!
    @stream(
        limit: 15
    )
    @validate

    fieldWithoutArguments(
        where: SearchByRootTestObject
        @searchBy

        order: [SortByRootTestObject!]
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        """
        The cursor or offset within the stream to start.
        """
        offset: StreamOffset
        @streamOffset
    ): TestObjectsStream!
    @stream
    @validate
}

type StreamNavigation {
    current: StreamOffset!
    next: StreamOffset
    previous: StreamOffset
}

type TestObject {
    id: ID!
}

type TestObjectsStream {
    """
    Requested items.
    """
    items: [TestObject!]!

    """
    Total number of items. Not recommended querying it in each query
    due to performance.
    """
    length: Int

    """
    Offsets/Cursors to navigate within the stream.
    """
    navigation: StreamNavigation!
}
