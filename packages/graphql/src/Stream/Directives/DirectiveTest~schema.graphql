type Query implements InterfaceA & InterfaceB {
    fieldWithoutArguments: [Object] @stream

    fieldWithArguments(argument: String): [Object] @stream

    fieldWithDirectives(
        a: _ @searchBy,
        b: _ @sortBy
        c: _ = 123
        @streamChunk(
            size: 15
            limit: 10
        )
        d: _ @streamCursor
    ): [Object] @stream

    fieldNotSearchable: [Object] @stream(searchable: false)

    fieldNotSortable: [Object] @stream(sortable: false)

    fieldWithDeprecations(
        a: _ @deprecated @searchBy,
        b: _ @deprecated @sortBy
        c: _ = 123
        @deprecated
        @streamChunk(
            limit: 123
        )
        d: _ @deprecated @streamCursor
    ): [Object]
    @stream(
        chunk: 15
    )
}

type Object {
    id: ID
}

interface InterfaceA {
    fieldWithArguments(argument: String): [Object]
}

interface InterfaceB implements InterfaceC {
    fieldNotSearchable: [Object]
}

interface InterfaceC {
    fieldWithDirectives(
        a: TypeDoesntMatter,
        b: TypeDoesntMatter,
        c: TypeDoesntMatter,
        d: TypeDoesntMatter,
    ): [Object]
}
