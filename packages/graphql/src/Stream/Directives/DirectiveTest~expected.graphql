"""
Use Input as Search Conditions for the current Builder.
"""
directive @searchBy
on
    | ARGUMENT_DEFINITION

directive @searchByOperatorAllOf
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorAnyOf
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorIn
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorIsNotNull
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorIsNull
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNot
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotIn
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorProperty
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Use Input as Sort Conditions for the current Builder.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

directive @sortByOperatorField
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Splits list of items into the chunks and return one chunk specified by page number or cursor.
"""
directive @stream(
    searchable: Boolean
    sortable: Boolean
)
on
    | FIELD_DEFINITION

directive @streamChunk(
    default: Int!
    max: Int!
)
on
    | ARGUMENT_DEFINITION

directive @streamCursor
on
    | ARGUMENT_DEFINITION

enum SearchByTypeFlag {
    yes
}

"""
Sort direction.
"""
enum SortByTypeDirection {
    asc
    desc
}

"""
Available conditions for `type Object` (only one property allowed at a time).
"""
input SearchByConditionObject {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionObject!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionObject!]
    @searchByOperatorAnyOf

    """
    Property condition.
    """
    id: SearchByScalarIDOrNull
    @searchByOperatorProperty

    """
    Not.
    """
    not: SearchByConditionObject
    @searchByOperatorNot
}

"""
Available operators for `scalar ID` (only one operator allowed at a time).
"""
input SearchByScalarIDOrNull {
    """
    Equal (`=`).
    """
    equal: ID
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [ID!]
    @searchByOperatorIn

    """
    Is NOT NULL?
    """
    isNotNull: SearchByTypeFlag
    @searchByOperatorIsNotNull

    """
    Is NULL?
    """
    isNull: SearchByTypeFlag
    @searchByOperatorIsNull

    """
    Not Equal (`!=`).
    """
    notEqual: ID
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [ID!]
    @searchByOperatorNotIn
}

"""
Sort clause for `type Object` (only one property allowed at a time).
"""
input SortByClauseObject {
    """
    Property clause.
    """
    id: SortByTypeDirection
    @sortByOperatorField
}

"""
The `String` scalar type represents textual data, represented as UTF-8
character sequences. The String type is most often used by GraphQL to
represent free-form human-readable text.
"""
scalar StreamCursor
@scalar(
    class: "LastDragon_ru\\LaraASP\\GraphQL\\Stream\\Scalars\\Cursor"
)

type Object {
    id: ID
}

type Query {
    fieldNotSearchable(
        chunk: Int = 25
        @streamChunk(
            default: 25
            max: 100
        )

        cursor: StreamCursor
        @streamCursor

        order: [SortByClauseObject!]
        @sortBy
    ): [Object]
    @stream(
        searchable: false
    )

    fieldNotSortable(
        chunk: Int = 25
        @streamChunk(
            default: 25
            max: 100
        )

        cursor: StreamCursor
        @streamCursor

        where: SearchByConditionObject
        @searchBy
    ): [Object]
    @stream(
        sortable: false
    )

    fieldWithArguments(
        argument: String

        chunk: Int = 25
        @streamChunk(
            default: 25
            max: 100
        )

        cursor: StreamCursor
        @streamCursor

        order: [SortByClauseObject!]
        @sortBy

        where: SearchByConditionObject
        @searchBy
    ): [Object]
    @stream

    fieldWithDirectives(
        a: SearchByConditionObject
        @searchBy

        b: [SortByClauseObject!]
        @sortBy

        c: Int = 5
        @streamChunk(
            default: 5
            max: 10
        )

        d: StreamCursor
        @streamCursor
    ): [Object]
    @stream

    fieldWithoutArguments(
        chunk: Int = 25
        @streamChunk(
            default: 25
            max: 100
        )

        cursor: StreamCursor
        @streamCursor

        order: [SortByClauseObject!]
        @sortBy

        where: SearchByConditionObject
        @searchBy
    ): [Object]
    @stream
}
