"""
Use Input as Search Conditions for the current Builder.
"""
directive @searchBy
on
    | ARGUMENT_DEFINITION

directive @searchByOperatorAllOf
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorAnyOf
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorIn
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNot
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotEqual
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorNotIn
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @searchByOperatorProperty
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Use Input as Sort Conditions for the current Builder.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

directive @sortByOperatorField
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Splits list of items into the chunks and returns one chunk specified
by an offset or a cursor.
"""
directive @stream(
    """
    Overrides default builder. Useful if the standard detection
    algorithm doesn't fit/work. By default, the directive will use
    the field and its type to determine the Builder to query.
    """
    builder: StreamBuilder

    """
    Overrides default unique key. Useful if the standard detection
    algorithm doesn't fit/work. By default, the directive will use
    the name of field with `ID!` type.
    """
    key: String

    """
    Overrides default limit.
    """
    limit: Int

    """
    Overrides default searchable status.
    """
    searchable: Boolean

    """
    Overrides default sortable status.
    """
    sortable: Boolean
)
on
    | FIELD_DEFINITION

directive @streamCursor
on
    | ARGUMENT_DEFINITION

directive @streamLimit(
    default: Int
    max: Int
)
on
    | ARGUMENT_DEFINITION

"""
Sort direction.
"""
enum SortByTypeDirection {
    asc
    desc
}

"""
Available conditions for `type Car` (only one property allowed at a time).
"""
input SearchByConditionCar {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByConditionCar!]
    @searchByOperatorAllOf

    """
    Any of the conditions must be true.
    """
    anyOf: [SearchByConditionCar!]
    @searchByOperatorAnyOf

    """
    Property condition.
    """
    id: SearchByScalarID
    @searchByOperatorProperty

    """
    Not.
    """
    not: SearchByConditionCar
    @searchByOperatorNot
}

"""
Available operators for `scalar ID` (only one operator allowed at a time).
"""
input SearchByScalarID {
    """
    Equal (`=`).
    """
    equal: ID
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [ID!]
    @searchByOperatorIn

    """
    Not Equal (`!=`).
    """
    notEqual: ID
    @searchByOperatorNotEqual

    """
    Outside a set of values.
    """
    notIn: [ID!]
    @searchByOperatorNotIn
}

"""
Available conditions for `type Car` (only one property allowed at a time).
"""
input SearchByScoutConditionCar {
    """
    All of the conditions must be true.
    """
    allOf: [SearchByScoutConditionCar!]
    @searchByOperatorAllOf

    """
    Property condition.
    """
    id: SearchByScoutScalarID
    @searchByOperatorProperty
}

"""
Available operators for `scalar ID` (only one operator allowed at a time).
"""
input SearchByScoutScalarID {
    """
    Equal (`=`).
    """
    equal: ID
    @searchByOperatorEqual

    """
    Within a set of values.
    """
    in: [ID!]
    @searchByOperatorIn

    """
    Outside a set of values.
    """
    notIn: [ID!]
    @searchByOperatorNotIn
}

"""
Sort clause for `type Car` (only one property allowed at a time).
"""
input SortByClauseCar {
    """
    Property clause.
    """
    id: SortByTypeDirection
    @sortByOperatorField
}

"""
Sort clause for `type Car` (only one property allowed at a time).
"""
input SortByScoutClauseCar {
    """
    Property clause.
    """
    id: SortByTypeDirection
    @sortByOperatorField
}

"""
Explicit builder. Only one of fields allowed.
"""
input StreamBuilder {
    """
    The reference to a function that provides a Builder instance.
    """
    builder: String

    """
    The class name of the model to query.
    """
    model: String

    """
    The relation name to query.
    """
    relation: String
}

interface InterfaceA {
    fieldWithArguments(
        argument: String
        cursor: StreamCursor
        limit: Int!
        order: [SortByClauseCar!]
        where: SearchByConditionCar
    ): CarsStream!
}

interface InterfaceB
implements
    & InterfaceC
{
    fieldNotSearchable(
        cursor: StreamCursor
        limit: Int!
        order: [SortByClauseCar!]
    ): CarsStream!
}

interface InterfaceC {
    fieldWithDirectives(
        a: SearchByConditionCar
        b: [SortByClauseCar!]
        c: Int!
        d: StreamCursor
    ): CarsStream!
}

"""
Represents a cursor for the `@stream` directive. The value can be a
positive `Int` or a `String`. The `Int` value represents the offset
(zero-based) to navigate to any position within the stream (= offset
pagination). And the `String` value represents the cursor and allows
navigation only to the previous/current/next pages (= cursor
pagination).
"""
scalar StreamCursor
@scalar(
    class: "LastDragon_ru\\LaraASP\\GraphQL\\Stream\\Types\\Cursor"
)

type Car {
    id: ID!
}

type CarsStream {
    items: [Car!]!
    length: Int
    navigator: StreamNavigator!
}

type Query
implements
    & InterfaceA
    & InterfaceB
{
    fieldNotSearchable(
        """
        The cursor or offset within the stream to start.
        """
        cursor: StreamCursor
        @streamCursor

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        order: [SortByClauseCar!]
        @sortBy
    ): CarsStream!
    @stream(
        searchable: false
    )
    @validate

    fieldNotSortable(
        """
        The cursor or offset within the stream to start.
        """
        cursor: StreamCursor
        @streamCursor

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        where: SearchByConditionCar
        @searchBy
    ): CarsStream!
    @stream(
        sortable: false
    )
    @validate

    fieldWithArguments(
        argument: String

        """
        The cursor or offset within the stream to start.
        """
        cursor: StreamCursor
        @streamCursor

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        order: [SortByClauseCar!]
        @sortBy

        where: SearchByConditionCar
        @searchBy
    ): CarsStream!
    @stream
    @validate

    fieldWithDeprecations(
        a: SearchByConditionCar
        @deprecated
        @searchBy

        b: [SortByClauseCar!]
        @deprecated
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `123`.
        """
        c: Int! = 15
        @deprecated
        @streamLimit(
            default: 15
            max: 123
        )
        @rules(
            apply: ["integer", "min:1", "max:123"]
        )

        """
        The cursor or offset within the stream to start.
        """
        cursor: StreamCursor
        @streamCursor

        """
        The cursor or offset within the stream to start.
        """
        d: StreamCursor
        @deprecated
        @streamCursor

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 15
        @streamLimit(
            default: 15
        )
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        order: [SortByClauseCar!]
        @sortBy

        where: SearchByConditionCar
        @searchBy
    ): CarsStream!
    @stream(
        limit: 15
    )
    @validate

    fieldWithDirectives(
        a: SearchByConditionCar
        @searchBy

        b: [SortByClauseCar!]
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `10`.
        """
        c: Int! = 10
        @streamLimit(
            default: 15
            max: 10
        )
        @rules(
            apply: ["integer", "min:1", "max:10"]
        )

        """
        The cursor or offset within the stream to start.
        """
        d: StreamCursor
        @streamCursor
    ): CarsStream!
    @stream
    @validate

    fieldWithDirectivesAndDefaults(
        a: SearchByConditionCar
        @searchBy

        b: [SortByClauseCar!]
        @sortBy

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        c: Int! = 15
        @streamLimit(
            default: 15
        )
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        """
        The cursor or offset within the stream to start.
        """
        d: StreamCursor
        @streamCursor
    ): CarsStream!
    @stream(
        limit: 15
    )
    @validate

    fieldWithSearch(
        """
        The cursor or offset within the stream to start.
        """
        cursor: StreamCursor
        @streamCursor

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        order: [SortByScoutClauseCar!]
        @sortBy

        search: String!
        @search

        where: SearchByScoutConditionCar
        @searchBy
    ): CarsStream!
    @stream
    @validate

    fieldWithoutArguments(
        """
        The cursor or offset within the stream to start.
        """
        cursor: StreamCursor
        @streamCursor

        """
        Maximum count of items to return. The value must be between `1` and `100`.
        """
        limit: Int! = 25
        @streamLimit
        @rules(
            apply: ["integer", "min:1", "max:100"]
        )

        order: [SortByClauseCar!]
        @sortBy

        where: SearchByConditionCar
        @searchBy
    ): CarsStream!
    @stream
    @validate
}

type StreamNavigator {
    current: StreamCursor!
    next: StreamCursor
    previous: StreamCursor
}
