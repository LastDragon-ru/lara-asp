"""
Use Input as Sort Conditions for the current Builder.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

directive @sortByOperatorField
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorProperty
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Sort direction.
"""
enum SortByTypeDirection {
    Asc
    Desc

    asc
    @deprecated(
        reason: "Please use `Asc` instead."
    )

    desc
    @deprecated(
        reason: "Please use `Desc` instead."
    )
}

"""
Sort clause for `input A` (only one property allowed at a time).
"""
input SortByClauseA {
    """
    Property clause.
    """
    flag: SortByTypeDirection
    @sortByOperatorField

    """
    Property clause.
    """
    name: SortByTypeDirection
    @sortByOperatorField
}

"""
Sort clause for `input B` (only one property allowed at a time).
"""
input SortByClauseB {
    """
    Property clause.
    """
    child: SortByClauseA
    @sortByOperatorProperty

    """
    Property clause.
    """
    name: SortByTypeDirection
    @sortByOperatorField
}

"""
Sort clause for `type C` (only one property allowed at a time).
"""
input SortByClauseC {
    """
    Property clause.
    """
    flag: SortByTypeDirection
    @sortByOperatorField

    """
    Property clause.
    """
    name: SortByTypeDirection
    @sortByOperatorField
}

"""
Sort clause for `type D` (only one property allowed at a time).
"""
input SortByClauseD {
    """
    Property clause.
    """
    child: SortByClauseC
    @sortByOperatorProperty
}

type C {
    flag: Boolean!
    list: [Boolean!]!
    name: String
}

type D {
    child: C!
}

type Query {
    a(
        order: [SortByClauseA!]
        @sortBy
    ): ID!
    @all

    b(
        order: [SortByClauseB!]
        @sortBy
    ): ID!
    @all

    c(
        order: [SortByClauseD!]
        @sortBy
    ): D!
    @all
}
