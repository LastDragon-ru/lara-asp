"""
Sort direction.
"""
enum SortByDirection {
    asc
    desc
}

enum Value {
    one
    two
}

"""
Sort clause for type Nested (only one property allowed at a time).
"""
input SortByClauseNested {
    """
    Property clause.
    """
    nested: SortByClauseNested

    """
    Property clause.
    """
    value: SortByDirection
}

"""
Sort clause for type Test (only one property allowed at a time).
"""
input SortByClauseTest {
    """
    Property clause.
    """
    enum: SortByDirection

    """
    Property clause.
    """
    enumNotNull: SortByDirection

    """
    Property clause.
    """
    nested: SortByClauseNested

    """
    Property clause.
    """
    nestedNotNull: SortByClauseNested

    """
    Property clause.
    """
    scalar: SortByDirection

    """
    Property clause.
    """
    scalarNotNull: SortByDirection
}

type Nested {
    nested: Nested
    value: String
}

type Query {
    test(
        order: [SortByClauseTest!]
        @sortBy
    ): Test!

    testList(
        order: [SortByClauseTest!]
        @sortBy
    ): [Test!]!
}

type Test {
    enum: Value
    enumNotNull: Value!
    list: [ID!]
    listNotNull: [ID!]!
    nested: Nested
    nestedNotNull: Nested!
    resolver: String
    scalar: ID
    scalarNotNull: ID!

    unsortable: ID!
    @sortByUnsortable
}

"""
Convert Input into Sort Clause.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

"""
Marks that field should be excluded from sort.
"""
directive @sortByUnsortable
on
    | FIELD_DEFINITION
    | INPUT_FIELD_DEFINITION
