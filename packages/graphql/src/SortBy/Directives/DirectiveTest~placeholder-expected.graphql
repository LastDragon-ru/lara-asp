"""
Sort direction.
"""
enum SortByDirection {
    asc
    desc
}

enum Value {
    one
    two
}

"""
Sort clause for type Nested (only one property allowed at a time).
"""
input SortByClauseNested {
    """
    Property clause.
    """
    nested: SortByClauseNested

    """
    Property clause.
    """
    value: SortByDirection
}

"""
Sort clause for type Test (only one property allowed at a time).
"""
input SortByClauseTest {
    """
    Property clause.
    """
    enum: SortByDirection

    """
    Property clause.
    """
    enumNotNull: SortByDirection

    """
    Property clause.
    """
    nested: SortByClauseNested

    """
    Property clause.
    """
    nestedNotNull: SortByClauseNested

    """
    Property clause.
    """
    scalar: SortByDirection

    """
    Property clause.
    """
    scalarNotNull: SortByDirection
}

type Nested {
    nested: Nested
    value: String
}

"""
Information about pagination using a Relay style cursor connection.
"""
type PageInfo {
    """
    Number of nodes in the current page.
    """
    count: Int!

    """
    Index of the current page.
    """
    currentPage: Int!

    """
    The cursor to continue paginating forwards.
    """
    endCursor: String

    """
    When paginating forwards, are there more items?
    """
    hasNextPage: Boolean!

    """
    When paginating backwards, are there more items?
    """
    hasPreviousPage: Boolean!

    """
    Index of the last available page.
    """
    lastPage: Int!

    """
    The cursor to continue paginating backwards.
    """
    startCursor: String

    """
    Total number of nodes in the paginated connection.
    """
    total: Int!
}

"""
Information about pagination using a fully featured paginator.
"""
type PaginatorInfo {
    """
    Number of items in the current page.
    """
    count: Int!

    """
    Index of the current page.
    """
    currentPage: Int!

    """
    Index of the first item in the current page.
    """
    firstItem: Int

    """
    Are there more pages after this one?
    """
    hasMorePages: Boolean!

    """
    Index of the last item in the current page.
    """
    lastItem: Int

    """
    Index of the last available page.
    """
    lastPage: Int!

    """
    Number of items per page.
    """
    perPage: Int!

    """
    Number of total available items.
    """
    total: Int!
}

type Query {
    test(
        order: [SortByClauseTest!]
        @sortBy
    ): Test!

    testList(
        order: [SortByClauseTest!]
        @sortBy
    ): [Test!]!

    testPaginateConnection(
        """
        A cursor after which elements are returned.
        """
        after: String

        """
        Limits number of fetched items.
        """
        first: Int!

        order: [SortByClauseTest!]
        @sortBy
    ): TestConnection

    testPaginatePaginator(
        """
        Limits number of fetched items.
        """
        first: Int!

        order: [SortByClauseTest!]
        @sortBy

        """
        The offset from which items are returned.
        """
        page: Int
    ): TestPaginator

    testPaginateSimple(
        """
        Limits number of fetched items.
        """
        first: Int!

        order: [SortByClauseTest!]
        @sortBy

        """
        The offset from which items are returned.
        """
        page: Int
    ): TestSimplePaginator
}

"""
Information about pagination using a simple paginator.
"""
type SimplePaginatorInfo {
    """
    Number of items in the current page.
    """
    count: Int!

    """
    Index of the current page.
    """
    currentPage: Int!

    """
    Index of the first item in the current page.
    """
    firstItem: Int

    """
    Are there more pages after this one?
    """
    hasMorePages: Boolean!

    """
    Index of the last item in the current page.
    """
    lastItem: Int

    """
    Number of items per page.
    """
    perPage: Int!
}

type Test {
    enum: Value
    enumNotNull: Value!
    list: [ID!]
    listNotNull: [ID!]!
    nested: Nested
    nestedNotNull: Nested!
    resolver: String
    scalar: ID
    scalarNotNull: ID!

    unsortable: ID!
    @sortByUnsortable
}

"""
A paginated list of Test edges.
"""
type TestConnection {
    """
    A list of Test edges.
    """
    edges: [TestEdge!]!

    """
    Pagination information about the list of edges.
    """
    pageInfo: PageInfo!
}

"""
An edge that contains a node of type Test and a cursor.
"""
type TestEdge {
    """
    A unique cursor that can be used for pagination.
    """
    cursor: String!

    """
    The Test node.
    """
    node: Test!
}

"""
A paginated list of Test items.
"""
type TestPaginator {
    """
    A list of Test items.
    """
    data: [Test!]!

    """
    Pagination information about the list of items.
    """
    paginatorInfo: PaginatorInfo!
}

"""
A paginated list of Test items.
"""
type TestSimplePaginator {
    """
    A list of Test items.
    """
    data: [Test!]!

    """
    Pagination information about the list of items.
    """
    paginatorInfo: SimplePaginatorInfo!
}

"""
Convert Input into Sort Clause.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

"""
Marks that field should be excluded from sort.
"""
directive @sortByUnsortable
on
    | FIELD_DEFINITION
    | INPUT_FIELD_DEFINITION
