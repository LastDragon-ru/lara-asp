"""
Use Input as Sort Conditions for the current Builder.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

directive @sortByOperatorField
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorNullsFirst
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorNullsLast
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorSort
on
    | INPUT_FIELD_DEFINITION

"""
Sort direction.
"""
enum SortByTypeDirection {
    Asc
    Desc

    asc
    @deprecated(
        reason: "Please use `Asc` instead."
    )

    desc
    @deprecated(
        reason: "Please use `Desc` instead."
    )
}

"""
Sort clause for `input InputA` (only one field allowed at a time).
"""
input SortByQueryClauseInputA {
    """
    Field clause.
    """
    id: SortByTypeDirection
    @sortByOperatorSort

    """
    Field clause.
    """
    name: SortByTypeDirection
    @sortByOperatorSort
}

"""
Sort clause for `type TypeB` (only one field allowed at a time).
"""
input SortByQueryClauseTypeB {
    """
    Field clause.
    """
    id: SortByTypeDirection
    @sortByOperatorSort

    """
    Field clause.
    """
    name: SortByTypeDirection
    @sortByOperatorSort
}

"""
Sort clause for `input InputA` (only one field allowed at a time).
"""
input SortByQueryRootInputA {
    """
    Field.
    """
    field: SortByQueryClauseInputA
    @sortByOperatorField

    """
    NULLs first
    """
    nullsFirst: SortByQueryClauseInputA
    @sortByOperatorNullsFirst

    """
    NULLs last
    """
    nullsLast: SortByQueryClauseInputA
    @sortByOperatorNullsLast
}

"""
Sort clause for `type TypeB` (only one field allowed at a time).
"""
input SortByQueryRootTypeB {
    """
    Field.
    """
    field: SortByQueryClauseTypeB
    @sortByOperatorField

    """
    NULLs first
    """
    nullsFirst: SortByQueryClauseTypeB
    @sortByOperatorNullsFirst

    """
    NULLs last
    """
    nullsLast: SortByQueryClauseTypeB
    @sortByOperatorNullsLast
}

type Query {
    a(
        order: [SortByQueryRootInputA!]
        @sortBy
    ): ID!
    @all(
        builder: "\\LastDragon_ru\\LaraASP\\GraphQL\\SortBy\\Directives\\DirectiveTest__QueryBuilderResolver"
    )

    b(
        order: [SortByQueryRootTypeB!]
        @sortBy
    ): [TypeB!]!
    @all(
        builder: "\\LastDragon_ru\\LaraASP\\GraphQL\\SortBy\\Directives\\DirectiveTest__QueryBuilderResolver"
    )
}

type TypeA {
    child: TypeB!
    id: ID!
    name: String!
}

type TypeB {
    id: ID!
    name: String
    parent: TypeA
}
