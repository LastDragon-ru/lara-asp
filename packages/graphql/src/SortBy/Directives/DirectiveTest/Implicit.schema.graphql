type Query {
    a(where: _ @sortBy): [A!]! @all
    b(where: _ @sortBy): [A!]! @paginate(
        model: "LastDragon_ru\\LaraASP\\GraphQL\\Testing\\Package\\Data\\Models\\TestObject"
    )
    c(where: _ @sortBy): [C!]! @all
}

type A {
    # Should be processed
    "Description should be ignored."
    id: ID!
    name: String!
    relation: B! @hasOne
    relations: [B!]! @hasMany
    relationWithArgs(arg: String): A! @hasOne
    relationsWithArgs(arg: String): [A!] @hasMany

    # Should be ignored
    field: B!
    fields: [B!]!
    property(arg: String): Int!
    resolver: Int! @field(resolver: "\\LastDragon_ru\\LaraASP\\GraphQL\\SortBy\\Directives\\DirectiveTest__Resolver")
    relationsPaginated: B! @hasMany(type: PAGINATOR)
    relationsPaginatedWithArgs(arg: String): [B!]! @hasMany(type: PAGINATOR)
}

type B {
    "Description should be ignored."
    id: ID!
    name: String
    parent: A! @hasOne
}

interface C {
    # Should be processed
    "Description should be ignored."
    id: ID!
    name: String!
    relation: B! @hasOne
    relations: [B!]! @hasMany
    relationWithArgs(arg: String): A! @hasOne
    relationsWithArgs(arg: String): [A!] @hasMany

    # Should be ignored
    field: B!
    fields: [B!]!
    property(arg: String): Int!
    resolver: Int! @field(resolver: "\\LastDragon_ru\\LaraASP\\GraphQL\\SortBy\\Directives\\DirectiveTest__Resolver")
    relationsPaginated: B! @hasMany(type: PAGINATOR)
    relationsPaginatedWithArgs(arg: String): [B!]! @hasMany(type: PAGINATOR)
}
