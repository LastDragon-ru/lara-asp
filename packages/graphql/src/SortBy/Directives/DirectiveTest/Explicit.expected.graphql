"""
Use Input as Sort Conditions for the current Builder.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

directive @sortByOperatorChild
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorField
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorNullsFirst
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorNullsLast
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorSort
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Sort direction.
"""
enum SortByTypeDirection {
    Asc
    Desc

    asc
    @deprecated(
        reason: "Please use `Asc` instead."
    )

    desc
    @deprecated(
        reason: "Please use `Desc` instead."
    )
}

input A {
    field: B!
    fields: [B!]!

    """
    Description should be copied.
    """
    id: ID!

    name: String!
}

input B {
    """
    Description should be copied.
    """
    id: ID!

    name: String
    parent: A!
}

"""
Sort clause for `input A` (only one property allowed at a time).
"""
input SortByClauseA {
    """
    Field clause.
    """
    field: SortByClauseB
    @sortByOperatorChild

    """
    Field clause.
    """
    fields: SortByClauseB
    @sortByOperatorChild

    """
    Description should be copied.
    """
    id: SortByTypeDirection
    @sortByOperatorSort

    """
    Field clause.
    """
    name: SortByTypeDirection
    @sortByOperatorSort
}

"""
Sort clause for `input B` (only one property allowed at a time).
"""
input SortByClauseB {
    """
    Description should be copied.
    """
    id: SortByTypeDirection
    @sortByOperatorSort

    """
    Field clause.
    """
    name: SortByTypeDirection
    @sortByOperatorSort

    """
    Field clause.
    """
    parent: SortByClauseA
    @sortByOperatorChild
}

"""
Sort clause for `input A` (only one property allowed at a time).
"""
input SortByRootA {
    """
    Field.
    """
    field: SortByClauseA
    @sortByOperatorField

    """
    NULLs first
    """
    nullsFirst: SortByClauseA
    @sortByOperatorNullsFirst

    """
    NULLs last
    """
    nullsLast: SortByClauseA
    @sortByOperatorNullsLast
}

"""
A paginated list of A items.
"""
type APaginator
@model(
    class: "LastDragon_ru\\LaraASP\\GraphQL\\Testing\\Package\\Data\\Models\\TestObject"
)
{
    """
    A list of A items.
    """
    data: [A!]!
    @field(
        resolver: "Nuwave\\Lighthouse\\Pagination\\PaginatorField@dataResolver"
    )

    """
    Pagination information about the list of items.
    """
    paginatorInfo: PaginatorInfo!
    @field(
        resolver: "Nuwave\\Lighthouse\\Pagination\\PaginatorField@paginatorInfoResolver"
    )
}

"""
Information about pagination using a fully featured paginator.
"""
type PaginatorInfo {
    """
    Number of items in the current page.
    """
    count: Int!

    """
    Index of the current page.
    """
    currentPage: Int!

    """
    Index of the first item in the current page.
    """
    firstItem: Int

    """
    Are there more pages after this one?
    """
    hasMorePages: Boolean!

    """
    Index of the last item in the current page.
    """
    lastItem: Int

    """
    Index of the last available page.
    """
    lastPage: Int!

    """
    Number of items per page.
    """
    perPage: Int!

    """
    Number of total available items.
    """
    total: Int!
}

type Query {
    a(
        order: [SortByRootA!]
        @sortBy
    ): ID!
    @all

    b(
        order: [SortByRootA!]
        @sortBy

        """
        Limits number of fetched items.
        """
        first: Int!

        """
        The offset from which items are returned.
        """
        page: Int
    ): APaginator!
    @paginate(
        model: "LastDragon_ru\\LaraASP\\GraphQL\\Testing\\Package\\Data\\Models\\TestObject"
    )
}
