"""
Use Input as Sort Conditions for the current Builder.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

directive @sortByOperatorChild
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorField
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorNullsFirst
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorNullsLast
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorSort
on
    | ENUM
    | INPUT_FIELD_DEFINITION
    | SCALAR

"""
Sort direction.
"""
enum SortByTypeDirection {
    Asc
    Desc

    asc
    @deprecated(
        reason: "Please use `Asc` instead."
    )

    desc
    @deprecated(
        reason: "Please use `Desc` instead."
    )
}

"""
Sort clause for `type Comment` (only one property allowed at a time).
"""
input SortByClauseComment {
    """
    Field clause.
    """
    text: SortByTypeDirection
    @sortByOperatorSort

    """
    Field clause.
    """
    user: SortByClauseUser
    @sortByOperatorChild
}

"""
Sort clause for `type User` (only one property allowed at a time).
"""
input SortByClauseUser {
    """
    Field clause.
    """
    id: SortByTypeDirection
    @sortByOperatorSort

    """
    Field clause.
    """
    name: SortByTypeDirection
    @sortByOperatorSort
}

"""
Sort clause for `input UsersSort` (only one property allowed at a time).
"""
input SortByClauseUsersSort {
    """
    Field clause.
    """
    id: SortByTypeDirection
    @sortByOperatorSort

    """
    Field clause.
    """
    name: SortByTypeDirection
    @sortByOperatorSort
}

"""
Sort clause for `type Comment` (only one property allowed at a time).
"""
input SortByRootComment {
    """
    Field.
    """
    field: SortByClauseComment
    @sortByOperatorField

    """
    NULLs first
    """
    nullsFirst: SortByClauseComment
    @sortByOperatorNullsFirst

    """
    NULLs last
    """
    nullsLast: SortByClauseComment
    @sortByOperatorNullsLast
}

"""
Sort clause for `input UsersSort` (only one property allowed at a time).
"""
input SortByRootUsersSort {
    """
    Field.
    """
    field: SortByClauseUsersSort
    @sortByOperatorField

    """
    NULLs first
    """
    nullsFirst: SortByClauseUsersSort
    @sortByOperatorNullsFirst

    """
    NULLs last
    """
    nullsLast: SortByClauseUsersSort
    @sortByOperatorNullsLast
}

type Comment {
    text: String

    user: User
    @belongsTo
}

type Query {
    """
    or `_` to generate type automatically ðŸ˜›
    """
    comments(
        order: [SortByRootComment!]
        @sortBy
    ): [Comment!]!
    @all

    """
    You can use normal input type
    """
    users(
        order: [SortByRootUsersSort!]
        @sortBy
    ): ID!
    @all
}

type User {
    id: ID!
    name: String!
}
