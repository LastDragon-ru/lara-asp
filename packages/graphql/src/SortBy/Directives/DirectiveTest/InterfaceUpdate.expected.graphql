"""
Use Input as Sort Conditions for the current Builder.
"""
directive @sortBy
on
    | ARGUMENT_DEFINITION

directive @sortByOperatorField
on
    | INPUT_FIELD_DEFINITION
    | SCALAR

directive @sortByOperatorSort
on
    | INPUT_FIELD_DEFINITION

"""
Sort direction.
"""
enum SortByTypeDirection {
    Asc
    Desc
}

"""
Sort clause for `input A` (only one field allowed at a time).
"""
input SortByClauseA {
    """
    Field clause.
    """
    id: SortByTypeDirection
    @sortByOperatorSort
}

"""
Sort clause for `type B` (only one field allowed at a time).
"""
input SortByClauseB {
    """
    Field clause.
    """
    id: SortByTypeDirection
    @sortByOperatorSort
}

"""
Sort clause for `input A` (only one field allowed at a time).
"""
input SortByRootA {
    """
    Field.
    """
    field: SortByClauseA
    @sortByOperatorField
}

"""
Sort clause for `type B` (only one field allowed at a time).
"""
input SortByRootB {
    """
    Field.
    """
    field: SortByClauseB
    @sortByOperatorField
}

interface QueryInterface
implements
    & QueryInterfaceA
    & QueryInterfaceB
{
    a(
        order: [SortByRootA!]
    ): B!

    b(
        order: [SortByRootB!]
    ): B!
}

interface QueryInterfaceA {
    a(
        order: [SortByRootA!]
    ): B!
}

interface QueryInterfaceB {
    b(
        order: [SortByRootB!]
    ): B!
}

type B {
    id: ID!
}

type Query
implements
    & QueryInterface
    & QueryInterfaceA
    & QueryInterfaceB
{
    a(
        order: [SortByRootA!]
        @sortBy
    ): B!
    @all

    b(
        order: [SortByRootB!]
        @sortBy
    ): B!
    @all
}
