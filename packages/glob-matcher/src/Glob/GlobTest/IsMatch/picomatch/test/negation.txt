# Source:
# * https://github.com/micromatch/picomatch (bf6a33bd3db990edfbfd20b3b160eed926cd07dd)
# * picomatch/test/dots-invalid.js

# describe('negation patterns - \"!\"', () => {
## it('should patterns with a leading \"!\" as negated/inverted globs', () => {
  // (2) [false, "abc", "!*"]
  // (2) [false, "abc", "!abc"]
  [false, "bar.md", "*!.md"]
  [false, "bar.md", "foo!.md"]
  [false, "foo!.md", "\\!*!*.md"]
  [false, "foo!bar.md", "\\!*!*.md"]
  [true, "!foo!.md", "*!*.md"]
  [true, "!foo!.md", "\\!*!*.md"]
  // (2) [true, "abc", "!*foo"]
  // (2) [true, "abc", "!foo*"]
  // (2) [true, "abc", "!xyz"]
  [true, "ba!r.js", "*!*.*"]
  [true, "bar.md", "*.md"]
  [true, "foo!.md", "*!*.*"]
  [true, "foo!.md", "*!*.md"]
  [true, "foo!.md", "*!.md"]
  [true, "foo!.md", "*.md"]
  [true, "foo!.md", "foo!.md"]
  [true, "foo!bar.md", "*!*.md"]
  [true, "foobar.md", "*b*.md"]

## it('should treat non-leading \"!\" as literal characters', () => {
  [false, "a", "a!!b"]
  [false, "aa", "a!!b"]
  [false, "a/b", "a!!b"]
  [false, "a!b", "a!!b"]
  [true, "a!!b", "a!!b"]
  [false, "a/!!/b", "a!!b"]

## it('should support negation in globs that have no other special characters', () => {
  // (2) [false, "a/b", "!a/b"]
  // (2) [true, "a", "!a/b"]
  // (2) [true, "a.b", "!a/b"]
  // (2) [true, "a/a", "!a/b"]
  // (2) [true, "a/c", "!a/b"]
  // (2) [true, "b/a", "!a/b"]
  // (2) [true, "b/b", "!a/b"]
  // (2) [true, "b/c", "!a/b"]

## it('should support multiple leading ! to toggle negation', () => {
  // (2) [false, "abc", "!abc"]
  // (2) [true, "abc",  "!!abc"]
  // (2) [false, "abc", "!!!abc"]
  // (2) [true, "abc",  "!!!!abc"]
  // (2) [false, "abc", "!!!!!abc"]
  // (2) [true, "abc",  "!!!!!!abc"]
  // (2) [false, "abc", "!!!!!!!abc"]
  // (2) [true, "abc",  "!!!!!!!!abc"]

## it('should support negation extglobs after leading !', () => {
  // (2) [false, "abc", "!(abc)"]
  // (2) [true, "abc",  "!!(abc)"]
  // (2) [false, "abc", "!!!(abc)"]
  // (2) [true, "abc",  "!!!!(abc)"]
  // (2) [false, "abc", "!!!!!(abc)"]
  // (2) [true, "abc",  "!!!!!!(abc)"]
  // (2) [false, "abc", "!!!!!!!(abc)"]
  // (2) [true, "abc",  "!!!!!!!!(abc)"]

## it('should support negation with globs', () => {
  [false, "a/a", "!(*/*)"]
  [false, "a/b", "!(*/*)"]
  [false, "a/c", "!(*/*)"]
  [false, "b/a", "!(*/*)"]
  [false, "b/b", "!(*/*)"]
  [false, "b/c", "!(*/*)"]
  [false, "a/b", "!(*/b)"]
  [false, "b/b", "!(*/b)"]
  [false, "a/b", "!(a/b)"]
  // (2) [false, "a", "!*"]
  // (2) [false, "a.b", "!*"]
  // (2) [false, "a/a", "!*/*"]
  // (2) [false, "a/b", "!*/*"]
  // (2) [false, "a/c", "!*/*"]
  // (2) [false, "b/a", "!*/*"]
  // (2) [false, "b/b", "!*/*"]
  // (2) [false, "b/c", "!*/*"]
  // (2) [false, "a/b", "!*/b"]
  // (2) [false, "b/b", "!*/b"]
  // (2) [false, "a/c", "!*/c"]
  // (2) [false, "a/c", "!*/c"]
  // (2) [false, "b/c", "!*/c"]
  // (2) [false, "b/c", "!*/c"]
  // (2) [false, "bar", "!*a*"]
  // (2) [false, "fab", "!*a*"]
  // (2) [false, "a/a", "!a/(*)"]
  // (2) [false, "a/b", "!a/(*)"]
  // (2) [false, "a/c", "!a/(*)"]
  // (2) [false, "a/b", "!a/(b)"]
  // (2) [false, "a/a", "!a/*"]
  // (2) [false, "a/b", "!a/*"]
  // (2) [false, "a/c", "!a/*"]
  // (2) [false, "fab", "!f*b"]
  // (4.8) [true, "a", "!(*/*)"]
  // (4.8) [true, "a.b", "!(*/*)"]
  // (4.8) [true, "a", "!(*/b)"]
  // (4.8) [true, "a.b", "!(*/b)"]
  // (4.8) [true, "a/a", "!(*/b)"]
  // (4.8) [true, "a/c", "!(*/b)"]
  // (4.8) [true, "b/a", "!(*/b)"]
  // (4.8) [true, "b/c", "!(*/b)"]
  // (4.8) [true, "a", "!(a/b)"]
  // (4.8) [true, "a.b", "!(a/b)"]
  // (4.8) [true, "a/a", "!(a/b)"]
  // (4.8) [true, "a/c", "!(a/b)"]
  // (4.8) [true, "b/a", "!(a/b)"]
  // (4.8) [true, "b/b", "!(a/b)"]
  // (4.8) [true, "b/c", "!(a/b)"]
  // (2) [true, "a/a", "!*"]
  // (2) [true, "a/b", "!*"]
  // (2) [true, "a/c", "!*"]
  // (2) [true, "b/a", "!*"]
  // (2) [true, "b/b", "!*"]
  // (2) [true, "b/c", "!*"]
  // (2) [true, "a", "!*/*"]
  // (2) [true, "a.b", "!*/*"]
  // (2) [true, "a", "!*/b"]
  // (2) [true, "a.b", "!*/b"]
  // (2) [true, "a/a", "!*/b"]
  // (2) [true, "a/c", "!*/b"]
  // (2) [true, "b/a", "!*/b"]
  // (2) [true, "b/c", "!*/b"]
  // (2) [true, "a", "!*/c"]
  // (2) [true, "a.b", "!*/c"]
  // (2) [true, "a/a", "!*/c"]
  // (2) [true, "a/b", "!*/c"]
  // (2) [true, "b/a", "!*/c"]
  // (2) [true, "b/b", "!*/c"]
  // (2) [true, "foo", "!*a*"]
  // (2) [true, "a", "!a/(*)"]
  // (2) [true, "a.b", "!a/(*)"]
  // (2) [true, "b/a", "!a/(*)"]
  // (2) [true, "b/b", "!a/(*)"]
  // (2) [true, "b/c", "!a/(*)"]
  // (2) [true, "a", "!a/(b)"]
  // (2) [true, "a.b", "!a/(b)"]
  // (2) [true, "a/a", "!a/(b)"]
  // (2) [true, "a/c", "!a/(b)"]
  // (2) [true, "b/a", "!a/(b)"]
  // (2) [true, "b/b", "!a/(b)"]
  // (2) [true, "b/c", "!a/(b)"]
  // (2) [true, "a", "!a/*"]
  // (2) [true, "a.b", "!a/*"]
  // (2) [true, "b/a", "!a/*"]
  // (2) [true, "b/b", "!a/*"]
  // (2) [true, "b/c", "!a/*"]
  // (2) [true, "bar", "!f*b"]
  // (2) [true, "foo", "!f*b"]

## it('should negate files with extensions', () => {
  // (2) [false, ".md", "!.md"]
  // (2) [true, "a.js", "!**/*.md"]
  // (2) [false, "b.md", "!**/*.md"]
  // (2) [true, "c.txt", "!**/*.md"]
  // (2) [true, "a.js", "!*.md"]
  // (2) [false, "b.md", "!*.md"]
  // (2) [true, "c.txt", "!*.md"]
  // (2) [false, "abc.md", "!*.md"]
  // (2) [true, "abc.txt", "!*.md"]
  // (2) [false, "foo.md", "!*.md"]
  // (2) [true, "foo.md", "!.md"]

## it('should support negated single stars', () => {
  // (2) [true, "a.js", "!*.md"]
  // (2) [true, "b.txt", "!*.md"]
  // (2) [false, "c.md", "!*.md"]
  // (2) [false, "a/a/a.js", "!a/*/a.js"]
  // (2) [false, "a/b/a.js", "!a/*/a.js"]
  // (2) [false, "a/c/a.js", "!a/*/a.js"]
  // (2) [false, "a/a/a/a.js", "!a/*/*/a.js"]
  // (2) [true, "b/a/b/a.js", "!a/*/*/a.js"]
  // (2) [true, "c/a/c/a.js", "!a/*/*/a.js"]
  // (2) [false, "a/a.txt", "!a/a*.txt"]
  // (2) [true, "a/b.txt", "!a/a*.txt"]
  // (2) [true, "a/c.txt", "!a/a*.txt"]
  // (2) [false, "a.a.txt", "!a.a*.txt"]
  // (2) [true, "a.b.txt", "!a.a*.txt"]
  // (2) [true, "a.c.txt", "!a.a*.txt"]
  // (2) [false, "a/a.txt", "!a/*.txt"]
  // (2) [false, "a/b.txt", "!a/*.txt"]
  // (2) [false, "a/c.txt", "!a/*.txt"]

## it('should support negated globstars (multiple stars)', () => {
  // (2) [true, "a.js", "!*.md"]
  // (2) [true, "b.txt", "!*.md"]
  // (2) [false, "c.md", "!*.md"]
  // (2) [false, "a/a/a.js", "!**/a.js"]
  // (2) [false, "a/b/a.js", "!**/a.js"]
  // (2) [false, "a/c/a.js", "!**/a.js"]
  // (2) [true, "a/a/b.js", "!**/a.js"]
  // (2) [false, "a/a/a/a.js", "!a/**/a.js"]
  // (2) [true, "b/a/b/a.js", "!a/**/a.js"]
  // (2) [true, "c/a/c/a.js", "!a/**/a.js"]
  // (2) [true, "a/b.js", "!**/*.md"]
  // (2) [true, "a.js", "!**/*.md"]
  // (2) [false, "a/b.md", "!**/*.md"]
  // (2) [false, "a.md", "!**/*.md"]
  [false, "a/b.js", "**/*.md"]
  [false, "a.js", "**/*.md"]
  [true, "a/b.md", "**/*.md"]
  [true, "a.md", "**/*.md"]
  // (2) [true, "a/b.js", "!**/*.md"]
  // (2) [true, "a.js", "!**/*.md"]
  // (2) [false, "a/b.md", "!**/*.md"]
  // (2) [false, "a.md", "!**/*.md"]
  // (2) [true, "a/b.js", "!*.md"]
  // (2) [true, "a.js", "!*.md"]
  // (2) [true, "a/b.md", "!*.md"]
  // (2) [false, "a.md", "!*.md"]
  // (2) [true, "a.js", "!**/*.md"]
  // (2) [false, "b.md", "!**/*.md"]
  // (2) [true, "c.txt", "!**/*.md"]

## it('should not negate when inside quoted strings', () => {
  [false, "foo.md", "\"!*\".md"]
  [true, "\"!*\".md", "\"!*\".md"]
  // (4.3) [true, "!*.md", "\"!*\".md"]

  [false, "foo.md", "\"!*\".md", null, { "keepQuotes": true }]
  [true, "\"!*\".md", "\"!*\".md", null, { "keepQuotes": true }]
  [false, "!*.md", "\"!*\".md", null, { "keepQuotes": true }]

  [false, "foo.md", "\"**\".md"]
  [true, "\"**\".md", "\"**\".md"]
  // (4.3) [true, "**.md", "\"**\".md"]

  [false, "foo.md", "\"**\".md", null, { "keepQuotes": true }]
  [true, "\"**\".md", "\"**\".md", null, { "keepQuotes": true }]
  [false, "**.md", "\"**\".md", null, { "keepQuotes": true }]

## it('should negate dotfiles', () => {
  // (2) [false, ".dotfile.md", "!.*.md"]
  // (2) [true, ".dotfile.md", "!*.md"]
  // (2) [true, ".dotfile.txt", "!*.md"]
  // (2) [true, ".dotfile.txt", "!*.md"]
  // (2) [true, "a/b/.dotfile", "!*.md"]
  // (2) [false, ".gitignore", "!.gitignore"]
  // (2) [true, "a", "!.gitignore"]
  // (2) [true, "b", "!.gitignore"]

## it('should not match slashes with a single star', () => {
  // (2) [true, "foo/bar.md", "!*.md"]
  // (2) [false, "foo.md", "!*.md"]

## it('should match nested directories with globstars', () => {
  // (2) [false, "a", "!a/**"]
  // (2) [false, "a/", "!a/**"]
  // (2) [false, "a/b", "!a/**"]
  // (2) [false, "a/b/c", "!a/**"]
  // (2) [true, "b", "!a/**"]
  // (2) [true, "b/c", "!a/**"]

  // (2) [true, "foo", "!f*b"]
  // (2) [true, "bar", "!f*b"]
  // (2) [false, "fab", "!f*b"]
